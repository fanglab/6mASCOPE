#!/bin/bash

# ---- error handling
set -o errexit;
set -o posix;
set -o pipefail;
set -o errtrace;
set -o nounset;
unexpected_error() {
    local errstat=$?
    echo "${g_prog:-$(basename "$0")}: Error! Encountered unexpected error at 'line $(caller)', bailing out..." 1>&2
    exit $errstat;
}
trap unexpected_error ERR;

# Save off original path variables, if set:
[[ ! -z ${PATH+set} ]]            && ORIG_PATH=$PATH
[[ ! -z ${PYTHONPATH+set} ]]      && ORIG_PYTHONPATH=$PYTHONPATH
[[ ! -z ${LD_LIBRARY_PATH+set} ]] && ORIG_LD_LIBRARY_PATH=$LD_LIBRARY_PATH

# Override the path variables with just what we need to run this script
PATH=/usr/bin:/bin
PYTHONPATH=
LD_LIBRARY_PATH=

# Capture program location information
g_prog=$(basename "$0");
g_progdir=$(dirname "$0");
g_progdir_abs=$(dirname "$(readlink -f "$0")");
g_progdir_full=$(cd "$g_progdir" > /dev/null; pwd)

# ---- global env

. "${g_progdir_abs}/../../../../../private/runtime-common/lib/globalenv.ish";

# ---- error functions
merror() {
    echo "$g_prog: Error! ""$@" 1>&2;
    exit 1;
}
minterror() {
    echo "$g_prog: Internal Error! ""$@" 1>&2;
    exit 1;
}
mwarn() {
    echo "$g_prog: Warning! ""$@" 1>&2;
}


# ---- global
g_python_exe="${g_progdir_abs}/../bin/python"

g_verbose=false
if  [[ ! -z "${SMRTDEBUG_BINWRAP_PYTHON+set}" ]] ||
    [[ ! -z "${SMRTDEBUG_BINWRAP_PYTHON2+set}" ]] ; then
    g_verbose=true
fi

# ---- subroutines

printcmd() {
    ! $g_verbose && return 0;

    local -a envs;
    local -a args;

    # Separate the leading environment variable settings from the command args
    local envdone=false;
    for i in ${1+"$@"}; do
	if ! $envdone && [[ $i =~ ^([[:alpha:]_][[:alnum:]_]*)=([\"\'].*) ]]; then
	    envs+=( "${BASH_REMATCH[1]}=${BASH_REMATCH[2]}" )
	elif ! $envdone && [[ $i =~ ^([[:alpha:]_][[:alnum:]_]*)=(.*) ]]; then
	    envs+=( "${BASH_REMATCH[1]}='${BASH_REMATCH[2]}'" )
	else
	    envdone=true;
	    # NOTE: with "set -u nounset" set, we have to use += or do
	    #       something like this (since "${args[@]}" and "${#args[@]}"
	    #       will give errors if the array is empty).  Another option
	    #       is:
	    #           args=( "${args[@]+${args[@]}}" "$i" );
	    args+=( "$i" );
	fi
    done

    # Determine the command in a format that can be printed out and
    # copy-and-pasted directly into a shell and can be run with an "eval".
    # NOTE: Another option is to use:
    #          cmd=$(printf '%q ' ${1+"$@"})
    #       But it will use backslashes instead of quotes, which is fine for
    #       executing, but it doesn't look as natural as with quotes.  Plus
    #       using quotes make it look like the trace output under "set -x"
    #       or "set -o xtrace"
    local cmd
    cmd=$( PS4=; set -x; ( true "${args[@]}" ) 2>&1 );
    cmd=${cmd#true };
    [[ ! -z "${envs[@]+set}" ]] && cmd="${envs[@]} $cmd"

    # Print out the command if neceassry.  The output should be
    # copy-and-pastable directly into a shell.
    echo "$cmd"
}


# ---- main

g_orig_pythonpath=""
g_orig_ldlibdirs=""
g_orig_path=""
if  [[ ! -z ${__SMRTINTERNAL_ORIG__PATH+set} ]] ||
    [[ ! -z ${__SMRTINTERNAL_ORIG__PYTHONPATH+set} ]] ||
    [[ ! -z ${__SMRTINTERNAL_ORIG__LD_LIBRARY_PATH+set} ]]; then

    # At least one is set, make sure all of them are set
    if  [[ ! -z ${__SMRTINTERNAL_ORIG__PATH+set} ]] &&
	[[ ! -z ${__SMRTINTERNAL_ORIG__PYTHONPATH+set} ]] &&
	[[ ! -z ${__SMRTINTERNAL_ORIG__LD_LIBRARY_PATH+set} ]]; then
	# All of them are set, continue on
	:
    else
	mwarn "Unexpected state:"
	mwarn "    __SMRTINTERNAL_ORIG__PATH:            ${__SMRTINTERNAL_ORIG__PATH+<<set>>}"
	mwarn "    __SMRTINTERNAL_ORIG__PYTHONPATH:      ${__SMRTINTERNAL_ORIG__PYTHONPATH+<<set>>}"
	mwarn "    __SMRTINTERNAL_ORIG__LD_LIBRARY_PATH: ${__SMRTINTERNAL_ORIG__LD_LIBRARY_PATH+<<set>>}"
	merror "Got unexpected state in __SMRTINTERNAL_ORIG__* environment variables"
    fi

    g_orig_path=${__SMRTINTERNAL_ORIG__PATH}
    g_orig_pythonpath=${__SMRTINTERNAL_ORIG__PYTHONPATH}
    g_orig_ldlibdirs=${__SMRTINTERNAL_ORIG__LD_LIBRARY_PATH}
else
    # None of them are set, capture the original environment
    g_orig_path=${ORIG_PATH:-}
    g_orig_pythonpath=${ORIG_PYTHONPATH:-}
    g_orig_ldlibdirs=${ORIG_LD_LIBRARY_PATH:-}
fi

# Scrub all python3 dirs in $g_orig_pythonpath, since they should not be valid
# for python2:
g_orig_pythonpath_nopy3=$( echo "${g_orig_pythonpath}:" | sed -e 's,[^:]*/lib/python3.7/site-packages:,,g' )
g_orig_pythonpath_nopy3=${g_orig_pythonpath_nopy3%:}

# QUESTION: Should we stomp on PATH, PYTHONPATH and LD_LIBRARY_PATH?  Or should
#           we just prepend to them and pass the original settings through?
# ANSWER: Yes, we should pass them through so we can use this wrapper to
#         run any custom script which requires its own PYTHONPATH,
#         LD_LIBRARY_PATH and PATH.  If we want to ensure that we have
#         absolute control over these variables for our internal scripts,
#         we can do that in the wrappers that call this wrapper.
#
# That overrides this answer...
# ANSWER: It's not 100% clear how we should handle this quite yet.  But,
#         the hope is that we will be able to overwrite all of them, with
#         the assumption that we will know exactly what python modules and
#         what subcommands we will run.  Wrappers for the subcommands should
#         set LD_LIBRARY_PATH as appropriate for the subcommand (so passing
#         LD_LIBRARY_PATH from the caller should not be needed).  And we should
#         know all the python packages we are supporting and they should be
#         specified in g_python_pythonpath below, so passing PYTHONPATH should
#         not be needed.  We should also know exactly which subcommands will
#         be called from which python scripts.  And instead of finding them
#         on the path, we should specify __SMRTPRIVATE_<PROGNAME>_EXEPATH in
#         the wrapper script for the calling wrapper script for each
#         subcommand, rather than finding them on the PATH.  For example,
#         if 'pbalign' requires calling the 'bamtools' subcommand, the wrapper
#         script for pbalign (which should be calling this python script),
#         should specify the absolute path to bamtools by setting the
#         __SMRTPRIVATE_BAMTOOLS_EXEPATH environment variable.
#
#         But that being said, we have not implemented the __SMRTPRIVATE
#         environment variables yet so we still need to set PATH for the
#         moment.  But we should be able to overwrite LD_LIBRARY_PATH and
#         PYTHONPATH.
#
#         As a safety net, we will also support passing through all the
#         path variables (PATH, PYTHONPATH and LD_LIBRARY_PATH) if the
#         SMRT_PYTHON_PASS_PATH_ENVVARS environment variable is not empty.


# Set the LD_LIBRARY_PATH for the thirdparty modules that require shared libs
g_python_ldlibdirs=""
g_python_ldlibdirs="$g_python_ldlibdirs:${g_progdir_abs}/../../../../thirdparty/gcc/gcc_8.3.0-2.12.1/lib"
g_python_ldlibdirs="$g_python_ldlibdirs:${g_progdir_abs}/../../../../thirdparty/libpng/libpng_1.6.18/lib"
g_python_ldlibdirs="$g_python_ldlibdirs:${g_progdir_abs}/../../../../thirdparty/freetype/freetype_2.6/lib"
g_python_ldlibdirs="$g_python_ldlibdirs:${g_progdir_abs}/../../../../thirdparty/hdf5/hdf5_1.8.19/lib"
g_python_ldlibdirs="$g_python_ldlibdirs:${g_progdir_abs}/../../../../thirdparty/htslib/htslib_1.9/lib"
g_python_ldlibdirs="$g_python_ldlibdirs:${g_progdir_abs}/../../../../thirdparty/openblas/openblas_0.2.20/lib"
g_python_ldlibdirs="$g_python_ldlibdirs:${g_progdir_abs}/../../../../thirdparty/zlib/zlib_1.2.11/lib"
g_python_ldlibdirs="$g_python_ldlibdirs:${g_progdir_abs}/../../../../thirdparty/bzip2/bzip2_1.0.6/lib"
g_python_ldlibdirs="$g_python_ldlibdirs:${g_progdir_abs}/../../../../thirdparty/ncurses/ncurses_6.1/lib"
g_python_ldlibdirs="$g_python_ldlibdirs:${g_progdir_abs}/../../../../thirdparty/readline/readline_8.0/lib"
g_python_ldlibdirs="$g_python_ldlibdirs:${g_progdir_abs}/../../../../thirdparty/openssl/openssl_1.1.1b/lib"
g_python_ldlibdirs="$g_python_ldlibdirs:${g_progdir_abs}/../../../../thirdparty/python/python_2.7.16/lib"

# Add libcurl to ldlibdirs (it is needed by pyBigWig)
g_python_ldlibdirs="$g_python_ldlibdirs:${g_progdir_abs}/../../../../thirdparty/curl/curl_7.64.1/lib"

# Set the PATH variable.  Ultimately we expect that this should just be the
# empty string.
g_python_path=""
# FIXME: Pick up the __SMRTPRIVATE_<PROGNAME>_EXEPATH environment variables
#        and put the parent directories into the path.  This is just a stopgap
#        until the underlying python scripts pick up the __SMRTPRIVATE_*
#        variables directly (and we won't need to set the path)
for i in ${!__SMRTPRIVATE_*}; do
    # Ignore any variables that don't match the __SMRTPRIVATE_*_EXEPATH format
    [[ ! $i =~ _EXEPATH$ ]] && continue;
    parentdir=$(dirname "${!i}")
    g_python_path="$g_python_path:$parentdir"
done
# Also pick up __SMRTPRIVATE_EXEPATH__<PROGNAME>
for i in ${!__SMRTPRIVATE_EXEPATH__*}; do
    parentdir=$(dirname "${!i}")
    g_python_path="$g_python_path:$parentdir"
done

# Sounds like we want all python scripts to have access to cromwell wrappers,
# so we'll add this implicit dependency here
g_python_path="$g_python_path:${g_progdir_abs}/../../../../thirdparty/cromwell/cromwell_43/binwrap"

# FIXME: Put internal/otherbins/runtime/bin in the path to pick up subcommands
#        that we may not have specified properly in the calling wrapper
#        scripts.  This is just a safety net and we expect this to go away.
g_python_path="$g_python_path:${g_progdir_abs}/../../../../../private/otherbins/runtime/bin"

# Set cromwell config file if needed
g_cromwell_configfile="$g_progdir_abs/../../../../../../../../../../../userdata/config-manual/cromwell-config.conf";
g_cromwell_configfile=$(readlink -m "$g_cromwell_configfile")
if [[ ! -z "${CROMWELL_CONFIG_FILE:-}" ]] ; then
    g_cromwell_configfile="$CROMWELL_CONFIG_FILE"
elif [[ ! -f "$g_cromwell_configfile" ]] ||
     [[ ! -r "$g_cromwell_configfile" ]]; then
    g_cromwell_configfile=""
fi

# Set the PYTHONPATH for all the internal and thirdparty python packages that
# we support.  All the private and thirdparty pythonpkgs all been symlinked
# to the ../site-packages directory, so we only need that directory in our
# PYTHONPATH.
g_python_pythonpath="${g_progdir_abs}/../site-packages"

# We expect that we should be able to override all the path related variables
# (PATH, PYTHONPATH, LD_LIBRARY_PATH), i.e there should be no need to inherit
# the values of any of path variable from the caller since we should be
# self-contained and know exactly which subcommands and which python modules
# we will be using  The subcommands should be wrappers that set LD_LIBRARY_PATH
# correctly as needed.  We also expect that we can specify the absolute path
# to any subcommand through environment varialbles of the form:
#      __SMRTPRIVATE_<PROGNAME>_EXEPATH
#
# We'll allow a safety net which will allow the path variables (SMRT_PATH,
# SMRT_PYTHONPATH, SMRT_LD_LIBRARY_PATH) to modify the path variables if
# SMRT_PYTHON_PASS_SMRTPATH_ENVVARS is set.
if  [[ ! -z "${SMRT_PYTHON_PASS_SMRTPATH_ENVVARS:-}" ]] ||
    [[ ! -z "${SMRT_PYTHON2_PASS_SMRTPATH_ENVVARS:-}" ]] ; then

    if   [[ ! -z "${SMRT_PYTHON2_PATH:-}" ]] ; then
	g_python_path="$g_python_path:$SMRT_PYTHON2_PATH";
    elif [[ ! -z "${SMRT_PYTHON_PATH:-}" ]] ; then
	g_python_path="$g_python_path:$SMRT_PYTHON_PATH";
    elif [[ ! -z "${SMRT_PATH:-}" ]] ; then
	g_python_path="$g_python_path:$SMRT_PATH";
    fi

    if   [[ ! -z "${SMRT_PYTHON2_PYTHONPATH:-}" ]] ; then
	g_python_pythonpath="$g_python_pythonpath:$SMRT_PYTHON2_PYTHONPATH";
    elif [[ ! -z "${SMRT_PYTHON_PYTHONPATH:-}" ]] ; then
	g_python_pythonpath="$g_python_pythonpath:$SMRT_PYTHON_PYTHONPATH";
    elif [[ ! -z "${SMRT_PYTHONPATH:-}" ]] ; then
	g_python_pythonpath="$g_python_pythonpath:$SMRT_PYTHONPATH";
    fi

    if   [[ ! -z "${SMRT_PYTHON2_LD_LIBRARY_PATH:-}" ]] ; then
	g_python_ldlibdirs="$g_python_ldlibdirs:$SMRT_PYTHON2_LD_LIBRARY_PATH";
    elif [[ ! -z "${SMRT_PYTHON_LD_LIBRARY_PATH:-}" ]] ; then
	g_python_ldlibdirs="$g_python_ldlibdirs:$SMRT_PYTHON_LD_LIBRARY_PATH";
    elif [[ ! -z "${SMRT_LD_LIBRARY_PATH:-}" ]] ; then
	g_python_ldlibdirs="$g_python_ldlibdirs:$SMRT_LD_LIBRARY_PATH";
    fi
fi

# By default, we will pass through the path environment variables
# (PATH, PYTHONPATH, LD_LIBRARY_PATH).  But do not pass them if the
# SMRT_PYTHON_NO_PASS_PATH_ENVVARS variable is set.
if  [[ ! -z "${SMRT_PYTHON_NO_PASS_PATH_ENVVARS:-}" ]] ||
    [[ ! -z "${SMRT_PYTHON2_NO_PASS_PATH_ENVVARS:-}" ]] ; then
    # Do not pass any of the path environnment variables
    :
else
    # Make sure we pass the callers's original PYTHONPATH, LD_LIBRARY_PATH,
    # PATH according to the ANSWER: to the QUESTION: above
    g_python_path="$g_python_path:$g_orig_path";
    g_python_pythonpath="$g_python_pythonpath:$g_orig_pythonpath_nopy3";
    g_python_ldlibdirs="$g_python_ldlibdirs:$g_orig_ldlibdirs";
fi

# Make sure this python is at the front of the path (to make sure we call
# this version of python if a python script invokes python directly as a
# subprocess). Some cluster configurations with torque were able to add
# /usr/bin at the front of the path when running on the cluster nodes,
# and when a python script invoked python, it was picking up the system
# python.  That caused an error since other vars were set to point at
# our python.
py2py3_bindirs="$g_progdir_full";
if [[ -x "$g_progdir_full/python3" ]] ; then
    # Leave as is, since we get both versions of python from the same dir
    :
elif  [[ $g_progdir_full =~ /python/python_2.7.16/bin[^/]*/*$ ]]; then
    py2py3_bindirs+=":${g_progdir_full//python\/python_2.7.16\/bin/python3\/python3_3.7.3\/bin}"
else
    # Leave as is, we can only find the python2 version (so calling python3
    # without specifying the path to it will probably not work)
    :
fi

if [[ ! $g_python_path =~ ^${py2py3_bindirs}: ]] ; then
    g_python_path="$py2py3_bindirs:$g_python_path"
fi

# This stuff is basically for development only, where we want to adjust the
#
# LD_LIBRARY_PATH, PYTHONPATH and PATH on the command line.
# Even though we pass the environment through with the -V option of SGE, at
# least some versions of SGE have a bug where the environement variables get
# truncated at 10000 characters, which can come into play with things like
# PYTHONPATH.
#
# So allow these special SMRT_PYTHON_*_PREPEND and SMRT_PYTHON_*_APPEND
# variables to modify the variables after we've set them to our pacbio
# specific paths.  This should work a bit better than trying modify and
# pass the underlying variables (like PYTHONPATH) directly.
#
# These should be after the last path assignment, so that the final path can
# be modified (should be ok, since these should be used for development only).

# python (i.e. python2) prepends:
if [[ ! -z "${SMRT_PYTHON_PATH_PREPEND:-}" ]] ; then
    g_python_path="$SMRT_PYTHON_PATH_PREPEND:$g_python_path"
fi
if [[ ! -z "${SMRT_PYTHON_PYTHONPATH_PREPEND:-}" ]] ; then
    g_python_pythonpath="$SMRT_PYTHON_PYTHONPATH_PREPEND:$g_python_pythonpath"
fi
if [[ ! -z "${SMRT_PYTHON_LDLIBPATH_PREPEND:-}" ]] ; then
    g_python_ldlibdirs="$SMRT_PYTHON_LDLIBPATH_PREPEND:$g_python_ldlibdirs"
fi
# python (i.e. python2) appends:
if [[ ! -z "${SMRT_PYTHON_PATH_APPEND:-}" ]] ; then
    g_python_path="$g_python_path:$SMRT_PYTHON_PATH_APPEND"
fi
if [[ ! -z "${SMRT_PYTHON_PYTHONPATH_APPEND:-}" ]] ; then
    g_python_pythonpath="$g_python_pythonpath:$SMRT_PYTHON_PYTHONPATH_APPEND"
fi
if [[ ! -z "${SMRT_PYTHON_LDLIBPATH_APPEND:-}" ]] ; then
    g_python_ldlibdirs="$g_python_ldlibdirs:$SMRT_PYTHON_LDLIBPATH_APPEND"
fi

# python2 prepends:
if [[ ! -z "${SMRT_PYTHON2_PATH_PREPEND:-}" ]] ; then
    g_python_path="$SMRT_PYTHON2_PATH_PREPEND:$g_python_path"
fi
if [[ ! -z "${SMRT_PYTHON2_PYTHONPATH_PREPEND:-}" ]] ; then
    g_python_pythonpath="$SMRT_PYTHON2_PYTHONPATH_PREPEND:$g_python_pythonpath"
fi
if [[ ! -z "${SMRT_PYTHON2_LDLIBPATH_PREPEND:-}" ]] ; then
    g_python_ldlibdirs="$SMRT_PYTHON2_LDLIBPATH_PREPEND:$g_python_ldlibdirs"
fi
# python2 appends:
if [[ ! -z "${SMRT_PYTHON2_PATH_APPEND:-}" ]] ; then
    g_python_path="$g_python_path:$SMRT_PYTHON2_PATH_APPEND"
fi
if [[ ! -z "${SMRT_PYTHON2_PYTHONPATH_APPEND:-}" ]] ; then
    g_python_pythonpath="$g_python_pythonpath:$SMRT_PYTHON2_PYTHONPATH_APPEND"
fi
if [[ ! -z "${SMRT_PYTHON2_LDLIBPATH_APPEND:-}" ]] ; then
    g_python_ldlibdirs="$g_python_ldlibdirs:$SMRT_PYTHON2_LDLIBPATH_APPEND"
fi

# Clean up leading and trailing colons (:) and any empty paths (::)
# g_python_path cleanup
while [[ $g_python_path =~ :: ]]; do
    g_python_path=${g_python_path//::/:};
done
g_python_path=${g_python_path#:};
g_python_path=${g_python_path%:};

# g_python_pythonpath cleanup
while [[ $g_python_pythonpath =~ :: ]]; do
    g_python_pythonpath=${g_python_pythonpath//::/:};
done
g_python_pythonpath=${g_python_pythonpath#:};
g_python_pythonpath=${g_python_pythonpath%:};

# g_python_libdirs cleanup
while [[ $g_python_ldlibdirs =~ :: ]]; do
    g_python_ldlibdirs=${g_python_ldlibdirs//::/:};
done
g_python_ldlibdirs=${g_python_ldlibdirs#:};
g_python_ldlibdirs=${g_python_ldlibdirs%:};


# Hardwire the latest chemistry bundle dir
g_chemistry_bundle_dir=""
if [[ -z "${SMRT_CHEMISTRY_BUNDLE_DIR+set}" ]] ; then
    bundledir_abs=$(readlink -m "$g_progdir_abs/../../../../../../../../smrtlink-analysisservices-gui/current/private/pacbio/smrtlink-analysisservices-gui/resources/pacbio-bundles");
    if [[ -d "$bundledir_abs" ]] ; then
	g_chemistry_bundle_dir="$bundledir_abs/chemistry-pb-active";
    fi
else
    g_chemistry_bundle_dir="$SMRT_CHEMISTRY_BUNDLE_DIR";
fi

# Hardwire the pbpipeline-resources directory
g_pipeline_bundle_dir="${g_progdir_abs}/../../../../pacbio/pbpipeline-resources"

# Explicitly set the MPLCONFIGDIR environment variable to redirect the
# matplotlib caches to a read-writable location under the smrtlink root
# (when running as the smrtlink user).  If this area is not writable
# (presumbably, because we are not running as the smrtlink user), then
# set it to $HOME/.smrtlink/matplotlib in order to avoid conflicting
# with the user's normal python matplotlib environment.
#
# This should hopefully avoid errors where the MPLCONFIGDIR is not
# writable and bug in matplotlib which doesn't properly create the
# tmp directory to use as an alternative, generating errors like this:
#
#    IOError: [Errno 2] No such file or directory: u'/tmp/1765299.1.smrt.q/matplotlib-sge/fontList.cache
#
# This is captured in this matplotlib bug, indicating problems relating
# writing the users MPLCONFIG cache directory, though it doesn't address
# why matplotlib doesn't try to create the temp directory before using it:
#
#    https://github.com/matplotlib/matplotlib/issues/3960/
#
# Note that it seems that matplotlib seems to create the MPLCONFIG directory
# as needed, except for the case where the MPLCONFIG directory is not
# writaable and it tries to fall back to a directory in /tmp (based on the
# user name and such).
#
# It is unclear why the default MPLCONFIGDIR is not writable for the
# smrtlink user at some sites.  But we should avoid that issue completely by
# always specifying our own alternative explicitly.
#
# Note that this setting could really live in the wrapper scripts for only
# the executables that depend on matplotlib (i.e. only pbreports exes at
# this time), but we will set it here for any python command for now.  The
# MPLCONFIGDIR will only be created when matplot lib is actually imported
# and used.
#
# In any case, we do not want to use the users normal MPLCONFIG directory,
# we will always excpliticly specify it, and hopefully it will always
# be writable.  If not, we probably have other issues, but it will probably
# result in the 'No such file or directory' error above again.
g_rwdir=$(readlink -m "$g_progdir_abs/../../../../../rwdir")
g_mplconfigdir="$g_rwdir/matplotlib"
if [[ ! -w "$g_rwdir" ]]; then
    if [[ -d "${HOME:-}" ]] && [[ -w "${HOME:-}" ]]; then
	g_mplconfigdir="$HOME/.smrtlink/matplotlib"
    else
	local tmpdir="/tmp"
	if [[ -d "${TMPDIR:-}" ]] && [[ -w "${TMPDIR:-}" ]]; then
	    tmpdir=$TMPDIR;
	fi
	local username;
	username=$(id -nu)
	g_mplconfigdir="$tmpdir/smrtlink.${username}.python2.matplotlib.$$"
	# Make sure the directory gets cleaned up on exiting python, if it
	# was created (which should only happen if maplotlib was loaded).
	trap "{ rm -f '$g_mplconfigdir'; }" EXIT
    fi
fi

# Call python, specifying the paths we expect to use.
# Inhibit the generation of python bytecodes (.pyc) files (see bug 27735
# for details).  Basically we will remove all .pyc and .pyo files in our
# production install tree, and inhibit auto create of the .pyc files at
# execution time.  Among other things, this allows us to maintain the
# install tree as a read-only (invariant) directory structure.

# Ignore the per-user $HOME/.local site directory (PYTHONNOUSERSITE)

# Print the command if we are in verbose mode (i.e. the environment
# variable 'SMRTDEBUG_BINWRAP_PYTHON' is set):
printcmd \
__SMRTINTERNAL_ORIG__PYTHONPATH="$g_orig_pythonpath" \
__SMRTINTERNAL_ORIG__LD_LIBRARY_PATH="$g_orig_ldlibdirs" \
__SMRTINTERNAL_ORIG__PATH="$g_orig_path" \
SMRT_CHEMISTRY_BUNDLE_DIR="$g_chemistry_bundle_dir" \
SMRT_PIPELINE_BUNDLE_DIR="$g_pipeline_bundle_dir" \
CROMWELL_CONFIG_FILE="$g_cromwell_configfile" \
PYTHONNOUSERSITE=1 \
PYTHONDONTWRITEBYTECODE=1 \
PATH="$g_python_path" \
PYTHONPATH="$g_python_pythonpath" \
LD_LIBRARY_PATH="$g_python_ldlibdirs" \
MPLCONFIGDIR="$g_mplconfigdir" \
    exec "$g_python_exe" ${1+"$@"}

__SMRTINTERNAL_ORIG__PYTHONPATH="$g_orig_pythonpath" \
__SMRTINTERNAL_ORIG__LD_LIBRARY_PATH="$g_orig_ldlibdirs" \
__SMRTINTERNAL_ORIG__PATH="$g_orig_path" \
SMRT_CHEMISTRY_BUNDLE_DIR="$g_chemistry_bundle_dir" \
SMRT_PIPELINE_BUNDLE_DIR="$g_pipeline_bundle_dir" \
CROMWELL_CONFIG_FILE="$g_cromwell_configfile" \
PYTHONNOUSERSITE=1 \
PYTHONDONTWRITEBYTECODE=1 \
PATH="$g_python_path" \
PYTHONPATH="$g_python_pythonpath" \
LD_LIBRARY_PATH="$g_python_ldlibdirs" \
MPLCONFIGDIR="$g_mplconfigdir" \
    exec "$g_python_exe" ${1+"$@"}
