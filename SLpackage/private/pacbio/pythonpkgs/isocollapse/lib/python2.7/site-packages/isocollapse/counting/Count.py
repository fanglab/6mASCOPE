#! python

"""
Class `CountRunner` to report read status of FL reads,
as well as make abundance report.
"""
import logging
import os.path as op

from .CountingUtils import read_group_file, output_read_count_FL, make_abundance_file


__author__ = 'etseng@pacificbiosciences.com'

log = logging.getLogger(__name__)


class CountRunner(object):
    """
    Compute read status of FL CCS reads and output abundance report.
    """

    def __init__(self, group_filename,
                 transcript_to_reads_dict, read_to_length_dict,
                 output_read_stat_filename,
                 output_abundance_filename):
        """
        Parameters:
          group_filename -- an input group file associating collapsed isoforms with FL reads.
          transcript_to_reads_dict -- {isoform: zmws} dict
          output_read_stat_filename -- an output FL read status report
          output_abundance_filename -- an output abundance report
        """
        # output read status report and abundance report
        self.read_stat_fn = output_read_stat_filename
        self.abundance_fn = output_abundance_filename

        self.group_filename = group_filename  # input, group file of collapsed isoforms
        self.transcript_to_reads_dict = transcript_to_reads_dict  # input: {isoforms: reads}
        self.read_to_length_dict = read_to_length_dict  # input {read: length}
        self.sample_prefix = None
        self.validate_inputs()

    def __str__(self):
        return ("<%s (%s, zmw) to count reads abundance of isoforms>\n" %
                (self.__class__.__name__, self.group_filename))

    def validate_inputs(self):
        """Validate existence of input files."""
        logging.info("Validing inputs.")
        if not op.exists(self.group_filename):
            raise IOError("Input group file %s does not exist" % self.group_filename)

    def run(self, restricted_movies=None):
        """
        Compute read status for FL reads, and make abundance report.
        Parameters:
          restricted_movies -- if is None, process reads from ALL movies; otherwise
                               only process reads in the list of restricted movies.
        """
        # Read cid info from the input group file.
        cid_info = read_group_file(group_filename=self.group_filename,
                                   sample_prefixes=self.sample_prefix)

        # Output FL read status
        logging.debug("Computing read status of FL reads.")
        output_read_count_FL(cid_info=cid_info,
                             output_filename=self.read_stat_fn,
                             sample_prefix=self.sample_prefix,
                             transcript_to_reads_dict=self.transcript_to_reads_dict,
                             read_to_length_dict=self.read_to_length_dict,
                             output_mode='w', restricted_movies=restricted_movies)
        logging.info("Read status of FL reads written to %s", self.read_stat_fn)
        logging.info("IsoSeqS does not use NFL reads, don't append read status of nFL reads.")

        # Make abundance file
        make_abundance_file(read_stat_filename=self.read_stat_fn,
                            output_filename=self.abundance_fn,
                            given_total=None,
                            restricted_movies=restricted_movies,
                            write_header_comments=True)
        logging.info("Abundance file written to %s", self.abundance_fn)
