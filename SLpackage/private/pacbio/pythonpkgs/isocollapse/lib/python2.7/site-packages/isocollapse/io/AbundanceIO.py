#! python

"""Streaming IO support for Abundance files."""

from pbcore.io import ReaderBase, WriterBase


TOTAL_FL = "# Total Number of FL reads:"


class AbundanceRecord(object):

    """A AbundanceRecord contains the folliwing fields:
    pbid, count_fl, norm_fl
    where,
    count_fl: Number of associated FL reads
    norm_fl: count_fl / total number of FL reads
    """

    ATTRIBUTES = ["pbid", "count_fl", "norm_fl"]
    HEADER = "\t".join(ATTRIBUTES)

    def __init__(self, pbid, count_fl, norm_fl):
        self.pbid = str(pbid)

        def type_or_na(t, x):
            """Return x of type if not 'NA' else 0"""
            return t(x) if not x == 'NA' else 0
        self.count_fl = type_or_na(int, count_fl)
        self.norm_fl = type_or_na(float, norm_fl)

    def __str__(self):
        return "{0}\t{1}\t{2:.2g}".format(self.pbid, self.count_fl, self.norm_fl)

    def __repr__(self):
        return self.__str__()

    @classmethod
    def fromString(cls, line):
        """Construct and return a AbundanceRecord object given a string."""
        fields = line.strip().split('\t')
        if len(fields) != 3:
            raise ValueError("Could not recognize %s as a valid AbundanceRecord." % line)
        return AbundanceRecord(pbid=fields[0], count_fl=fields[1], norm_fl=fields[2])


class AbundanceReader(ReaderBase):

    """
    Streaming reader for an Abundance file.
    """

    def _read_comments_header(self):
        """Returns comments as well as the first line (usually header)."""
        comments = []
        firstLine = None
        for line in self.file:
            if line.startswith("#"):
                comments.append(line.rstrip())
            else:
                firstLine = line
                break
        return comments, firstLine

    @classmethod
    def parse_comments(cls, comments):
        """Returns total_fl read from comments.
           total_fl = Total Number of FL reads
        """
        total_fl = None
        if isinstance(comments, str):
            comments = comments.split("\n")
        elif not isinstance(comments, list):
            raise ValueError("comments %s must be either a str or a list of str" % comments)

        try:
            for h in comments:
                if TOTAL_FL in h:
                    total_fl = int(h.strip().split(":")[-1])
        except (ValueError, IndexError):
            pass
        return total_fl

    def __init__(self, f):
        super(AbundanceReader, self).__init__(f)
        self.comments, self.firstLine = self._read_comments_header()
        self.total_fl = self.parse_comments(self.comments)

    def __iter__(self):
        if self.firstLine:
            if not self.firstLine.strip().startswith('pbid\t'):
                yield AbundanceRecord.fromString(self.firstLine)
            self.firstLine = None
        for line in self.file:
            line = line.strip()
            if len(line) > 0 and line[0] != "#" and line != AbundanceRecord.HEADER:
                yield AbundanceRecord.fromString(line)


class AbundanceWriter(WriterBase):

    """
    Write comments, the header and AbundanceRecords to a file.
    """

    def __init__(self, f, comments=None, total_fl=None):
        super(AbundanceWriter, self).__init__(f)
        self.total_fl = total_fl
        self._write_comments_header(comments)

    @classmethod
    def make_comments(cls, total_fl):
        """Make a comments str with total_fl info.
        """
        return "\n".join([
            "# -----------------",
            "# Field explanation",
            "# -----------------",
            "# count_fl: Number of associated FL reads",
            "# norm_fl: count_fl / total number of FL reads, mapped or unmapped",
            "%s %s" % (TOTAL_FL, total_fl),
            "#"])

    def _write_comments_header(self, comments):
        """Write comments and the header."""
        c_str = None
        if comments is not None:
            if isinstance(comments, str):
                c_str = comments
            elif isinstance(comments, list) and len(comments) > 0:
                c_str = "\n".join(comments)
            else:
                raise ValueError("comments %s must be either a str or a list of str" % comments)
        elif self.total_fl:
            c_str = self.make_comments(self.total_fl)

        if c_str:
            self.file.write("{0}\n".format(c_str))

        self.file.write("{0}\n".format(AbundanceRecord.HEADER))

    def writeRecord(self, record):
        """Write a AbundanceRecrod."""
        if not isinstance(record, AbundanceRecord):
            raise ValueError("record type %s is not AbundanceRecord." % type(record))
        else:
            self.file.write("{0}\n".format(str(record)))
