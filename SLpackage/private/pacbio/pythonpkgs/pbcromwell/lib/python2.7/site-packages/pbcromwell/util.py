from .testkit.workflow_runner import TestkitCfg
import collections
import json
import logging
import os
import subprocess

LOG = logging.getLogger(__name__)


def yield_from_fofn(fofn_fn):
    with open(fofn_fn) as fofn:
        for line in fofn:
            line = line.strip()
            if line and not line.startswith('#'):
                yield line


def capture(cmd, default='', log=False):
    """Capture a system call.

    Return {default} on failure.
    """
    try:
        if log:
            LOG.info('System call: {!r}'.format(cmd))
        return subprocess.check_output(cmd, shell=True)
    except Exception:
        if log:
            msg = 'Failed system call {!r}'.format(cmd)
            LOG.exception(msg)
        return default


def xray_json(cfgcodes, revision, description, summary, testExecutionKey):
    """Return X-ray JSON (str), for importing later.

    https://confluence.xpand-it.com/display/public/XRAY/Import+Execution+Results#ImportExecutionResults-XrayJSONformat

    - cfgcodes:  list of ('testkit_cfg.json', exit_code)
    - revision, description, summary: substituted into xray.json "info" section
    """
    test_dict = collections.defaultdict(list)
    for cfg, code in cfgcodes:
        testkit_cfg = TestkitCfg.from_json(cfg)
        if not testkit_cfg.xrays:
            continue
        comment = '{} ({}) {}'.format(
                testkit_cfg.job_id,
                testkit_cfg.workflow_id,
                testkit_cfg.description)
        for key in testkit_cfg.xrays:
            test = dict(
                    comment=comment, # We might drop this someday.
                    status=('PASS' if code == 0 else 'FAIL'),
                    testKey=key,  # e.g. TAGT-420
            )
            test_dict[key].append(test)
    # If a Test applies to multiple testkits, any FAIL means a Test FAIL.
    tests = list()
    for key, test_list in sorted(test_dict.iteritems()):
        failed = any(t['status'] == 'FAIL' for t in test_list)
        # Accumulate "comments".
        comments = ';'.join(t['comment'] for t in sorted(test_list))
        test = dict(
                comment=comments,
                status=('PASS' if not failed else 'FAIL'),
                testKey=key,
        )
        tests.append(test)
    info = dict(
            summary=summary,
            description=description, # URL
            revision=revision,
    )
    results = dict(info=info, tests=tests)
    if testExecutionKey:
        results['testExecutionKey'] = testExecutionKey
    content = json.dumps(results, indent=2, sort_keys=True, separators=(',', ': '))
    return content + '\n'


def try_write_xray_json(fn, cfgcodes, testExecutionKey):
    """Write result of xray_json() to fn.

    Ensure that our new code never crashes.

    - fn: JSON filename
    - cfgcodes: passed along to xray_json()
    """
    try:
        description = os.environ.get('bamboo_resultsUrl', 'http://bamboo.pacificbiosciences.com')
        summary = os.environ.get('bamboo_planKey', 'Excecution: non-bamboo')
        revision = 'testkit-jobs:' + capture('git rev-parse --short HEAD', 'unknown')
        #os.environ.get('bamboo_planRepository_name')
        with open(fn, 'w') as sout:
            sout.write(xray_json(cfgcodes, revision=revision, description=description, summary=summary,
                testExecutionKey=testExecutionKey))
    except Exception:
        msg = 'Caught exception in try_write_xray_json({!r}, {!r}, {!r}).\nNo JSON written.'.format(
                fn, cfgcodes, testExecutionKey)
        LOG.exception(msg)
