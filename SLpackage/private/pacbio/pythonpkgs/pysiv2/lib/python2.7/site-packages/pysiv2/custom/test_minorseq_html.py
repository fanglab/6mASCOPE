
from zipfile import ZipFile

from pbcommand.models import FileTypes
from pbcore.io import openDataSet

from pbcommand.testkit import pb_requirements
from pysiv2.custom.base import TestBase


class TestMinorVariantsHtml(TestBase):
    """
    Verify tarball of HTML reports generated by 'juliet'.
    """

    @classmethod
    def setUpClass(cls):
        cls.is_barcoded = False
        cls.barcodes = set()
        super(TestMinorVariantsHtml, cls).setUpClass()
        for f_id, file_info in cls.datastore.get_file_dict().iteritems():
            if file_info.file_type_id == FileTypes.DS_ALIGN_CCS.file_type_id:
                cls._get_barcodes(file_info.path)

    @classmethod
    def _get_barcodes(cls, file_name):
        with openDataSet(file_name) as ds_in:
            cls.is_barcoded = ds_in.isBarcoded
            if cls.is_barcoded:
                for rr in ds_in.resourceReaders():
                    cls.barcodes.update(list(zip(rr.pbi.bcForward, rr.pbi.bcReverse)))

    @pb_requirements("SL-1253", "SL-1260", "SL-1307")
    def test_n_html_files(self):
        """
        SL-1260: confirm that we have the expected number of uniquely named
        HTML files.
        """
        for file_id, file_info in self.datastore.get_file_dict().iteritems():
            if file_info.is_chunked:
                continue
            if (file_info.file_type_id == FileTypes.ZIP.file_type_id and
                file_info.file_id.startswith("pysiv2")):
                with ZipFile(file_info.path, "r") as zip_in:
                    files = set(zip_in.namelist())
                    if self.is_barcoded:
                        self.assertEqual(len(files), len(self.barcodes))
                    else:
                        self.assertEqual(len(files), 1)
                    self.assertTrue(all([f.endswith(".html") for f in list(files)]), "Non-HTML file found in %s" % str(files))
                return True
        self.fail("Can't find HTML zipfile")
