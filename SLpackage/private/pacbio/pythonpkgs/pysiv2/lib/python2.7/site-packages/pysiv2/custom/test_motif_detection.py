
from unittest import SkipTest
import logging
import json
import csv
import os
import sys

from pbcommand.models import FileTypes
from pbcore.io import GffReader

from pysiv2.custom.base import TestValuesLoader
from pysiv2.custom import utils as u
from pysiv2.io.datastore import DataStore
from pysiv2.io.entrypoints import EntryPoints

__author__ = "Nat Echols"

log = logging.getLogger(__name__)


class TestMotifDetection(TestValuesLoader):

    """Validate consensus QV, snps, yield and n50 are in
       accordance with thresholds
    """
    @classmethod
    def setUpClass(cls):
        """ Loads json analysis thresholds into test_values and
            fasta reference into reference_seqs
            Uses reference_seqs to call snps found in consensus.fasta
            Also calculates some basic stats
        """
        log.info('Entering test_consensus_seqs setUpClass')
        super(TestMotifDetection, cls).setUpClass()
        datastore = DataStore.from_job_path(cls.job_dir)
        entrypoints = EntryPoints.from_job_path(cls.job_dir)
        cls.motif_records = []
        with open(datastore.motifs_csv) as motif_file:
            motif_summary_reader = csv.DictReader(motif_file, delimiter=',')
            for row in motif_summary_reader:
                cls.motif_records.append(row)
        cls.motifs_gff = None
        for file_id, file_info in cls.datastore.get_file_dict().iteritems():
            if file_info.file_type_id == FileTypes.GFF.file_type_id:
                if file_info.file_id.startswith("motif_maker.tasks.reprocess"):
                    cls.motifs_gff = file_info.path
                    break
        if cls.HAVE_TEST_VALUES:
            cls.expected_motifs = cls.test_values['motifs']['expected_motifs']

    def test_correct_motifs_found(self):
        """Verify that all of the expected motifs were found."""
        if not self.HAVE_TEST_VALUES:
            raise SkipTest("Test values not found")
        found_motifs = [k['motifString'] for k in self.motif_records]

        for motif in self.expected_motifs:
            log.info("Actual:{m}_in_motifs={a} expected={t}"
                     .format(m=motif, a=motif in found_motifs, t=True))
            self.assertIn(motif, found_motifs)

    def test_few_spurious_motifs(self):
        """Verify that not too many unexpected motifs were found."""
        if not self.HAVE_TEST_VALUES:
            raise SkipTest("Test values not found")
        log.info("Actual:spurious_motifs={s} threshold={t}"
                 .format(s=len(self.motif_records) - len(self.expected_motifs),
                         t=self.test_values['motifs']['max_spurious']))
        self.assertLessEqual(len(self.motif_records),
                             len(self.expected_motifs) + self.test_values['motifs']['max_spurious'])

    def test_found_most_of_expected_motifs(self):
        """Verify that, for the expected motifs, most of the motifs present in
        the genome were detected.
        """
        if not self.HAVE_TEST_VALUES:
            raise SkipTest("Test values not found")
        for motif in self.expected_motifs:
            matching_records = [k for k in self.motif_records
                                if k['motifString'] == motif]
            self.assertEqual(1, len(matching_records))
            matching_record = matching_records[0]

            log.info("Actual:{m}_fraction_identified={a} threshold={t}"
                     .format(m=motif, a=matching_record['fraction'],
                             t=self.test_values['motifs']['min_fraction']))
            self.assertGreater(matching_record['fraction'],
                               self.test_values['motifs']['min_fraction'])

    def test_reprocessed_gff_has_motifs(self):
        if len(self.motif_records) == 0:
            raise SkipTests("No motifs found, so none expected in GFF")
        n_motif_annotations = 0
        with GffReader(self.motifs_gff) as gff:
            for rec in gff:
                if "motif" in rec.attributes:
                    n_motif_annotations += 1
        log.info("Found {n} annotations".format(n=n_motif_annotations))
        self.assertTrue(n_motif_annotations > 0,
                        "No motif annotations found in reprocessed GFF")
