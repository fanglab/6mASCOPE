
"""
Test validation results from non-barcoded minor variants workflow using
internal settings (target_config='HIV-PB').
"""

from collections import defaultdict
import json
import os.path as op
import os

from pbcommand.pb_io import load_resolved_tool_contract_from
from pbcommand.utils import walker

from pysiv2.custom.base import TestStatisticsBase


def _match_juliet_file(basename):
    def _is_juliet_task_dir(path):
        return path.endswith("juliet/{f}".format(f=basename))
    return _is_juliet_task_dir


class TestJulietValidation(TestStatisticsBase):
    TEST_ID = "juliet_validation"
    METRIC_IDS = [
        "true_positive_rate",
        "false_positive_rate",
        "num_false_positives",
        "accuracy"
    ]

    @classmethod
    def getMetrics(cls):
        cls._validation_dicts = []
        cls.metric_dict = defaultdict(int)
        for json_file in walker(cls.job_dir, _match_juliet_file("validation.json")):
            with open(json_file) as f:
                d = json.loads(f.read())
                cls._validation_dicts.append(d)
                for k, v in d.iteritems():
                    cls.metric_dict[k] += v
        if len(cls._validation_dicts) > 1:
            for k, v in cls.metric_dict.iteritems():
                cls.metric_dict[k] = v / len(cls._validation_dicts)
        elif len(cls._validation_dicts) == 0:
            raise RuntimeError("No validation files found.")

    def test_juliet_resolved_tool_contract(self):
        """
        Verify that the underlying juliet sub-task was run with the correct
        target config.
        """
        TARGET_CONFIG = "juliet.task_options.target_config_universal"
        EXPECTED = set([
            "HIV-PB",
            "/pbi/dept/secondary/siv/testdata/target_config_hiv-pb.json"
        ])
        for rtc_json in walker(self.job_dir, _match_juliet_file("resolved-tool-contract.json")):
            rtc = load_resolved_tool_contract_from(rtc_json)
            self.assertTrue(rtc.task.options[TARGET_CONFIG] in EXPECTED)
