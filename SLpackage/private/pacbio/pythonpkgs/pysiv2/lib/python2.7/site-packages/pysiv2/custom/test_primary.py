
# TODO compare basecaller metrics against reality

"""
Test performance of basecaller and adapter finding in internal pipelines using
SubreadSet output.  This implicitly tests PostPrimary (i.e. baz2bam) as well.
"""

import unittest
import os.path as op

from pbcommand.models import FileTypes
from pbcore.io import SubreadSet, IndexedBamReader

from pysiv2.custom.base import TestStatisticsBase


class TestPrimaryOutput(TestStatisticsBase):
    TEST_ID = "primary"
    METRIC_IDS = [
        "n_subreads",
        "n_reads",
        "n_bases",
    ]

    @classmethod
    def getMetrics(cls):
        cls.subreads_file = None
        for file_id, file_info in cls.datastore.get_file_dict().iteritems():
            if file_info.file_type_id == FileTypes.DS_SUBREADS.file_type_id:
                cls.subreads_file = file_info.path
                break
        with SubreadSet(cls.subreads_file) as ds_in:
            cls.metric_dict["n_subreads"] = len(ds_in)
            cls.zmws = set()
            for bam in ds_in.resourceReaders():
                cls.zmws.update(set(list(bam.holeNumber)))
            cls.metric_dict["n_reads"] = len(cls.zmws)
            n_bases = 0
            for er in ds_in.externalResources:
                for bam_file in [er.bam, er.scraps]:
                    bam = IndexedBamReader(bam_file)
                    n_bases += int((bam.qEnd - bam.qStart).sum())
            cls.metric_dict["n_bases"] = n_bases

    def test_baz2bam_subreads_dataset_contents(self):
        with SubreadSet(self.subreads_file) as ds:
            try:
                subreads_bam = ds.externalResources[0].bam
                scraps_bam = ds.externalResources[0].scraps
            except AttributeError:
                self.fail("Can't retrieve subreads and scraps BAMs")
            else:
                self.assertTrue(op.isfile(subreads_bam))
                self.assertTrue(op.isfile(scraps_bam))

    def test_zmws(self):
        whitelist = self.test_values.get("primary", {}).get("zmw_list", None)
        if whitelist is None:
            raise unittest.SkipTest("List of expected ZMWs not specified")
        if not op.isabs(whitelist):
            whitelist = op.join(op.dirname(self.job_dir), whitelist)
        with open(whitelist) as f:
            zmws_expected = set([ int(x) for x in f.read().splitlines()])
            zmws_missing = zmws_expected.difference(self.zmws)
            zmws_unexpected = self.zmws.difference(zmws_expected)
            self.assertEqual(len(zmws_missing), 0,
                "{n} ZMWs not found in output BAM".format(n=zmws_missing))
            self.assertEqual(len(zmws_unexpected), 0,
                "{n} unexpected ZMWs in output BAM".format(
                n=len(zmws_unexpected)))
