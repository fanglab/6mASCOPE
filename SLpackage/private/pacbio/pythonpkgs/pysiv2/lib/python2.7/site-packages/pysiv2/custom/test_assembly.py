
"""
Tests for HGAP4 pipeline(s), specifically polished_falcon_fat.
"""

import unittest
import sys

from pbcore.io import SubreadSet, FastaReader
from pbcommand.models import FileTypes

from pysiv2.custom.base import TestStatisticsBase, TestReportStatistics


class TestPreAssembly(TestReportStatistics):
    REPORT_ID = "preassembly"
    TEST_ID = "preassembly"
    METRIC_IDS = [
        "raw_reads",
        "raw_mean",
        "raw_n50",
        "raw_bases",
        "preassembled_reads",
        "preassembled_mean",
        "preassembled_n50",
        "preassembled_bases",
        "preassembled_yield"
    ]


class TestPolishedAssembly(TestReportStatistics):
    """
    Test metrics in the output of pbreports.report.polished_assembly
    """
    REPORT_ID = "polished_assembly"
    TEST_ID = "polished_assembly"
    METRIC_IDS = [
        "polished_contigs",
        "max_contig_length",
        "n_50_contig_length",
        "sum_contig_lengths"
    ]


@unittest.skip("DISABLED as a result of TAG-2644")
class TestFilterSubreads(TestStatisticsBase):
    """
    Test to verify that subread filtering on RQ was applied properly
    """
    TEST_ID = "filter_subreads"
    METRIC_IDS = ["number_of_filtered_subreads", "min_subread_read_quality"]

    @classmethod
    def getMetrics(cls):
        # FIXME this needs to use a different mechanism to get the number of
        # filtered reads
        qnames = set([])
        for file_id, file_info in cls.datastore.get_file_dict().iteritems():
            if (file_info.file_type_id == FileTypes.FASTA.file_type_id and
                "bam2fasta" in file_info.file_id):
                with FastaReader(file_info.path) as fasta_in:
                    for rec in fasta_in:
                        qnames.add(rec.id)
        cls.metric_dict["number_of_filtered_subreads"] = len(qnames)
        min_rq = sys.maxint
        subreads_ds = cls.entrypoints.data['eid_subread']
        with SubreadSet(subreads_ds) as ds_in:
            for subread in ds_in:
                if subread.qName in qnames:
                    min_rq = min(min_rq, subread.readScore)
        cls.metric_dict["min_subread_read_quality"] = min_rq

    @unittest.skip("DISABLED as a result of TAG-2644")
    def test_filters_were_processed_bam2fasta(self):
        """
        Check that the number of subreads in the filtered XML SubreadSet is
        the same as the number of records in the bam2fasta output.
        """
        for file_id, file_info in self.datastore.get_file_dict().iteritems():
            if (file_info.file_type_id == FileTypes.DS_SUBREADS and
                "filterdataset" in file_info.file_id):
                with SubreadSet(file_info.path) as ds_filtered:
                    n_subreads_ds_filtered = len(ds_filtered)
                    self.assertEqual(n_subreads_ds_filtered,
                        self.metric_dict["number_of_filtered_subreads"])
