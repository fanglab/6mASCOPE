
import subprocess
import tempfile
import unittest
import logging
import shutil
import os

from pbcore.io import FastaReader, FastqReader, openDataSet
from pbcommand.models import FileTypes

from pysiv2.custom.base import TestValuesLoader
from pysiv2.utils import iterate_zipped_bam2fastx_outputs

log = logging.getLogger(__name__)


class TestBam2Fastx(TestValuesLoader):
    """
    Various sanity checks on output of bam2fasta.  This requires the addition
    of a ``bam2fastx`` section in ``test_values.json``, for example::

        "bam2fastx": {
            "n_records": 1234
        }
    """

    @classmethod
    def setUpClass(cls):
        cls.is_barcoded = False
        super(TestBam2Fastx, cls).setUpClass()
        if "eid_subread" in cls.entrypoints.data:
            with openDataSet(cls.entrypoints.data['eid_subread']) as ds_in:
                cls.is_barcoded = ds_in.isBarcoded

    def _get_output_file(self, file_type):
        for file_id, file_info in self.datastore.get_file_dict().iteritems():
            if (file_info.file_type_id == FileTypes.ZIP.file_type_id and
                file_type.ext in file_info.file_id):
                return file_info.path
        raise IOError("bam2{f} zipped file not found".format(
                      f=file_type.ext))

    def _test_bam2fastx_number_of_records(self, file_type, file_reader):
        file_name = self._get_output_file(file_type)
        n_records = 0
        for _fastx_file in iterate_zipped_bam2fastx_outputs(
                file_type=file_type,
                file_name=file_name,
                is_barcoded=self.is_barcoded):
            with file_reader(_fastx_file) as fastx_in:
                n_records += len([rec for rec in fastx_in])
        self.assertEqual(n_records,
                         self.test_values['bam2fastx']['n_records'])

    def test_bam2fasta_number_of_records(self):
        """
        Test that the number of records in the FASTA file is equal to the
        expected value (``n_records``).
        """
        self._test_bam2fastx_number_of_records(FileTypes.FASTA, FastaReader)

    def test_bam2fastq_number_of_records(self):
        """
        Test that the number of records in the FASTQ file is equal to the
        expected value (``n_records``).
        """
        self._test_bam2fastx_number_of_records(FileTypes.FASTQ, FastqReader)

    def _test_barcoded_bam2fastx_number_of_files(self, file_type, file_reader):
        if not self.is_barcoded:
            raise unittest.SkipTest("Input not barcoded, skipping test")
        file_name = self._get_output_file(file_type)
        n_files = 0
        for _fastx_file in iterate_zipped_bam2fastx_outputs(
                file_type=file_type,
                file_name=file_name,
                is_barcoded=self.is_barcoded):
            with file_reader(_fastx_file) as fastx_in:
                n_files += 1
        expected = self.test_values['bam2fastx'].get('n_files', 1)
        self.assertEqual(n_files, expected)

    def test_barcoded_bam2fasta_number_of_files(self):
        """
        For barcoded inputs, test that the number of FASTA files in the
        tarball of bam2fasta outputs is the expected value (defined by
        ``n_files`` in ``test_values.json``).
        """
        self._test_barcoded_bam2fastx_number_of_files(FileTypes.FASTA,
                                                      FastaReader)

    def test_barcoded_bam2fastq_number_of_files(self):
        """
        For barcoded inputs, test that the number of FASTQ files in the
        tarball of bam2fastq outputs is the expected value (defined by
        ``n_files`` in ``test_values.json``).
        """
        self._test_barcoded_bam2fastx_number_of_files(FileTypes.FASTQ,
                                                      FastqReader)
