
"""
Tests related to CCS barcoding applications; this is almost identical in
function to test_barcoding.py except for dataset type expectations.
"""

from unittest import SkipTest
import os.path as op
import json

from pbcore.io import openDataSet
from pbcommand.models import FileTypes, DataStore
from pbcommand.pb_io import load_report_from_json

from pysiv2.custom.base import TestReportStatistics, TestValuesLoader
from pysiv2.custom import test_barcoding

class TestBarcodeCCSReport(test_barcoding.TestBarcodeReport):

    REPORT_ID = "barcode"
    TEST_ID = "barcode_report"
    METRIC_IDS = ["n_barcodes", "mean_reads", "max_reads", "min_reads",
                  "mean_read_length",
                  "n_barcoded_reads", "n_unbarcoded_reads"]

    def test_number_of_barcoded_subreads(self):
        raise SkipTest("not applicable")


class TestDemultiplexedCCSOutput(test_barcoding.TestDemultiplexedOutput):

    SUB_REPORT_ID = "pbreports.tasks.ccs_demux_stats-out-0"
    DS_FILE_TYPE = FileTypes.DS_CCS

    def _get_services_dataset(self, ds_uuid):
        return self.service_access_layer.get_ccsreadset_by_id(ds_uuid)

    def _get_demux_dataset_in(self):
        ds_file = None
        for file_id, f in self.datastore.get_file_dict().iteritems():
            if f.file_id.startswith("pbcoretools.tasks.reparent"):
                ds_file = f.path
            elif f.file_id == "pbcoretools.tasks.update_consensus_reads-out-0" and ds_file is None:
                ds_file = f.path
        if ds_file is not None:
            return openDataSet(ds_file)
        elif "eid_ccs" in self.entrypoints.data:
            return openDataSet(self.entrypoints.data['eid_ccs'])
