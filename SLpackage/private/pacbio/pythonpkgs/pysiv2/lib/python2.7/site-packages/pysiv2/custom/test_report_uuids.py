

from unittest import SkipTest
import os.path as op
import os

from pbcommand.pb_io.report import load_report_from_json
from pbcommand.pb_io.tool_contract_io import load_resolved_tool_contract_from
from pbcommand.models import FileTypes
from pbcore.io import openDataSet

from pysiv2.custom.base import TestBase


def _get_rtc_dataset_uuids(report_file, use_outputs=False):
    rtc_path = op.join(op.dirname(report_file), "resolved-tool-contract.json")
    rtc = load_resolved_tool_contract_from(rtc_path)
    all_files = rtc.task.input_files
    if use_outputs:
        all_files = rtc.task.output_files
    ds_uuids = set()
    for file_name in all_files:
        if file_name.endswith(".xml"):
            with openDataSet(file_name) as ds:
                ds_uuids.add(ds.uuid)
    return ds_uuids


class TestPbreportsDataSetUUIDs(TestBase):
    """
    Verification for bug 31839 - all reports generated based on DataSet XML
    files should specify the dataset UUIDs.
    """

    def test_pbreports_reports_have_dataset_uuids(self):
        """Check that reports from pbreports list all input dataset UUIDs"""
        n_tested = 0
        for file_id, file_info in self.datastore.get_file_dict().iteritems():
            if not "pbreports" in file_info.file_id:
                continue
            if file_info.file_type_id == FileTypes.REPORT.file_type_id:
                r = load_report_from_json(file_info.path)
                if r.id == "subread_stats":
                    continue
                report_uuids = set(r._dataset_uuids)
                ds_uuids = _get_rtc_dataset_uuids(file_info.path)
                for uuid in ds_uuids:
                    self.assertTrue(uuid in report_uuids,
                        "{p}: {l} not in {r}".format(p=file_info.path,
                                                     l=uuid,
                                                     r=report_uuids))
                    n_tested += 1
        if n_tested == 0:
            raise SkipTest("No pbreports report found, or no datasets were used as input")

    def test_other_reports_have_dataset_uuids(self):
        """
        Check that reports output by other tasks list UUIDs from all
        **output** datasets.
        """
        n_tested = 0
        for file_id, file_info in self.datastore.get_file_dict().iteritems():
            if "pbreports" in file_info.file_id:
                continue
            if (file_info.file_type_id == FileTypes.REPORT.file_type_id and
                file_info.file_id != "pbsmrtpipe-report-tasks"):
                r = load_report_from_json(file_info.path)
                report_uuids = set(r._dataset_uuids)
                ds_uuids = _get_rtc_dataset_uuids(file_info.path, True)
                for uuid in ds_uuids:
                    self.assertTrue(uuid in report_uuids,
                        "{p}: {l} not in {r}".format(p=file_info.path,
                                                     l=uuid,
                                                     r=report_uuids))
                    n_tested += 1
        if n_tested == 0:
            raise SkipTest("No non-pbreports report found, or no datasets were used as input")
