
import logging
import json
import sys

from pbcommand.pb_io.common import load_pipeline_chunks_from_json
from pbcommand.cli import pbparser_runner
from pbcommand.models import get_gather_pbparser, FileTypes
from pbcommand.utils import setup_log

log = logging.getLogger(__name__)


class Constants(object):
    TOOL_ID = "pysiv2.tasks.gather_juliet_json"
    CHUNK_KEY = "$chunk.json_id"
    VERSION = "0.1.0"
    DRIVER = "python -m pysiv2.tasks.gather_juliet_json --resolved-tool-contract "
    OPT_CHUNK_KEY = 'pysiv2.task_options.gather_juliet_json_chunk_key'


def get_parser(constants=Constants):
    p = get_gather_pbparser(Constants.TOOL_ID,
                            Constants.VERSION,
                            "Juliet JSON gather",
                            "JSON gather for minor variants workflow",
                            Constants.DRIVER,
                            is_distributed=False)
    p.add_input_file_type(FileTypes.CHUNK, "cjson_in", "GCHUNK Json",
                          "Gathered CHUNK Json with Json chunk key")
    p.add_output_file_type(FileTypes.JSON, "json_out",
                           "JSON",
                           "Gathered JSON", "gathered")
    # Only need to add to argparse layer for the commandline
    p.arg_parser.add_str(Constants.OPT_CHUNK_KEY,
                         "chunk_key",
                         Constants.CHUNK_KEY,
                         "Chunk key",
                         "Chunk key to use (format $chunk.{chunk-key}")
    return p


def run_main_gather_juliet_json(chunk_json, output_file, chunk_key):
    chunks = load_pipeline_chunks_from_json(chunk_json)
    gathered = {}
    for chunk in chunks:
        if chunk_key in chunk.chunk_keys:
            with open(chunk.chunk_d[chunk_key]) as json_in:
                d = json.loads(json_in.read())
                assert len(set(d.keys()).intersection(gathered)) == 0
                gathered.update(d)
    with open(output_file, "w") as json_out:
        json_out.write(json.dumps(gathered))
    return 0


def args_runner(args):
    return run_main_gather_juliet_json(args.cjson_in, args.json_out, args.chunk_key)

def rtc_runner(rtc):
    return run_main_gather_juliet_json(rtc.task.input_files[0], rtc.task.output_files[0], Constants.CHUNK_KEY)


def main(argv=sys.argv):
    return pbparser_runner(argv[1:],
                           get_parser(),
                           args_runner,
                           rtc_runner,
                           log,
                           setup_log)


if __name__ == '__main__':
    sys.exit(main())
