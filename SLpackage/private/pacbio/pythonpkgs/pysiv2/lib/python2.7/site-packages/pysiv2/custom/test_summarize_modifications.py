
# XXX this is obsolete - see bug 30182


import unittest

from pbcommand.models import FileTypes
from pbcore.io import GffReader

from pysiv2.custom.base import TestStatisticsBase


class TestBaseModsSummaryGff(TestStatisticsBase):
    """
    Sanity check on the GFF output of kineticsTools.summarizeModifications.
    """
    TEST_ID = "summarize_modifications"
    METRIC_IDS = ["n_modifications"]

    @classmethod
    def getMetrics(cls):
        return
        cls.basemods_summary = None
        cls.variants_summary = None
        for file_id, file_info in cls.datastore.get_file_dict().iteritems():
            if file_info.file_type_id == FileTypes.GFF.file_type_id:
                if "summarize_modifications" in file_info.file_id:
                    cls.basemods_summary = file_info.path
                elif "summarize_consensus" in file_info.file_id:
                    cls.variants_summary = file_info.path
        if None in [cls.basemods_summary, cls.variants_summary]:
            raise IOError("Missing one or more GFF files")
        with GffReader(cls.variants_summary) as variants_gff:
            cls.variants_records = [rec for rec in variants_gff]
        with GffReader(cls.basemods_summary) as basemods_gff:
            cls.basemods_records = [rec for rec in basemods_gff]
        n_mods = 0
        for rec in cls.basemods_records:
            n_mods += int(rec.modsfwd.split(",")[0])
            n_mods += int(rec.modsrev.split(",")[0])
        cls.metric_dict["n_modifications"] = n_mods

    @unittest.skip("disabled")
    def test_summarize_modifications_gff_completeness(self):
        """
        CURRENTLY DISABLED
        Check that all attributes from the variants GFF are propagated to the
        basemods GFF with correct values.
        """
        self.assertTrue(len(self.basemods_records) > 0)
        self.assertEqual(len(self.basemods_records),
                         len(self.variants_records))
        for rec1, rec2 in zip(self.variants_records, self.basemods_records):
            attr1 = set(rec1.attributes.keys())
            attr2 = set(rec2.attributes.keys())
            self.assertTrue(attr2.issuperset(attr1),
                            "attr1: {a}\nattr2: {b}".format(a=attr1,
                                                            b=attr2))
            self.assertEqual(rec1.seqid, rec2.seqid)
            self.assertEqual(rec1.start, rec2.start)
            self.assertEqual(rec1.gaps, rec2.gaps)
            self.assertEqual(rec1.ins, rec2.ins)
            self.assertEqual(rec1.sub, rec2.sub)
            self.assertEqual(rec1.get("del"), rec2.get("del"))
