
from collections import defaultdict
import unittest
import logging
import os

from pbcore.io import GffReader
from pbcommand.models.common import FileTypes

from pysiv2.custom.base import TestBase

log = logging.getLogger(__name__)


class TestGFF(TestBase):

    """
    Validate the contents of GFF files
    """

    @classmethod
    def setUpClass(cls):
        super(TestGFF, cls).setUpClass()
        cls._gff_files = []
        for file_id, file_info in cls.datastore.get_file_dict().iteritems():
            if file_info.file_type_id == FileTypes.GFF.file_type_id:
                cls._gff_files.append(file_info.path)

    @property
    def gff_files(self):
        if len(self._gff_files) == 0:
            raise unittest.SkipTest("No GFF files found")
        return self._gff_files

    def test_gff_seqid_is_fasta_identifier(self):
        """
        Check that GFF files use only the identifier part of FASTA headers,
        no spaces allowed - see ticket 28667
        """
        for gff_file in self.gff_files:
            with GffReader(gff_file) as r:
                for rec in r:
                    self.assertTrue(not " " in rec.seqid,
                                    "seqid contains spaces:\n%s\n(file: %s)" %
                                    (str(rec), gff_file))

    def test_gff_file_headers(self):
        """
        Check that every GFF file contains headers.
        """
        for gff_file in self.gff_files:
            with GffReader(gff_file) as r:
                self.assertTrue(len(r.headers) > 0,
                                "No headers in %s" % gff_file)

    def test_gff_sort_order(self):
        """
        Check that records in all GFF output files are in sorted order
        (verification for bug 27785).
        """
        for gff_file in self.gff_files:
            with GffReader(gff_file) as gff:
                last_rec = None
                for rec in gff:
                    if last_rec is not None and rec.seqid == last_rec.seqid:
                        self.assertTrue(rec.start >= last_rec.start,
                                        "Records occur out of order:\n{l}\n{r}".format(r=rec, l=last_rec))
                    last_rec = rec
