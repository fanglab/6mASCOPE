#! python

"""Gather multiple bed."""
from __future__ import absolute_import

import logging
import sys
from pbcommand.models import FileTypes, DataStore, DataStoreFile
from pbcoretools.datastore_utils import datastore_to_datastorefile_objs
from pbsvtools.basic import TCP_INPUT, TCP_OUTPUT, BaseGatherConstants, gather_main, gather_run_main

log = logging.getLogger(__name__)

def gather_datastore(i_fns, o_fn):
    ds = DataStore([])
    for i_fn in i_fns:
        for uuid, f in DataStore.load_from_json(i_fn).files.iteritems():
            ds.add(f)
    ds.write_json(o_fn)


class Constants(BaseGatherConstants):
    """Constants used for gathering scattered `pbsv call` BED files."""
    TOOL_NAME = "gather_merge_alignments_by_sample"
    DESCRIPTION = "Gather DataStore of alignments by sample"
    CHUNK_KEY = "$chunk.datastore_id"
    DEFAULT_OUT_NAME = "gather_datastore"

    OUTPUT_FILES = [
        TCP_OUTPUT(FileTypes.JSON, "gather_datastore", "DataStore", "Gathered datastore", DEFAULT_OUT_NAME)
    ]

def rtc_runner(rtc):
    """
    :type rtc: pbcommand.models.ResolvedToolContract
    :return:
    """
    return gather_run_main(chunk_json=rtc.task.input_files[0],
                           chunk_key=Constants.CHUNK_KEY,
                           gathered_fn=rtc.task.output_files[0],
                           ln_name = Constants.DEFAULT_OUT_NAME,
                           gather_func=gather_datastore)


if __name__ == '__main__':
    sys.exit(gather_main(args=sys.argv[1:], const=Constants, rtc_runner=rtc_runner, alog=log))
