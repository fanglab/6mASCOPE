"""
Call ngmlr to map input reads in bam|fasta to reference fasta,
and write output to bam.
"""
from __future__ import absolute_import

import logging
import os.path as op
from .independent.utils import is_bam, is_xml, is_fasta, is_fasta_gz,\
        execute_as_bash, is_referenceset_xml, rmpath_cmd, execute, ln_cmd, \
        _link_or_make_fai_cmd, cmds2str, _fai, realpath
from .independent import ngmlrmap as indep
from .utils import get_fa_from_referenceset_or_fa


log = logging.getLogger()


def ngmlrmap_bam_in(in_fn, ref_fa, out_bam, nproc=4):
    """Call ngmlr to map in_fn to reference fasta and output to out_bam"""
    cmd = indep.ngmlrmap_bam_in_cmd(
        in_fn=in_fn, ref_fa=ref_fa, out_bam=out_bam, nproc=nproc)
    execute_as_bash([cmd], realpath('%s.ngmlrmap.bash' % out_bam))


def ngmlrmap_fasta_in(in_fn, ref_fa, out_bam, nproc=4):
    """Call ngmlr to map in_fn to reference fasta and output to out_bam"""
    cmd = indep.ngmlrmap_fasta_in_cmd(in_fn=in_fn, ref_fa=ref_fa, out_bam=out_bam, nproc=nproc)
    execute_as_bash([cmd], realpath('%s.ngmlrmap.bash' % out_bam))


def ngmlrmap(in_fn, ref_fn, out_bam, nproc=4):
    """ call ngmlr to map in.fa or in.bam to reference fasta.
    ref_fn --- reference in referenceset or fasta
    """
    ref_fa = get_fa_from_referenceset_or_fa(ref_fn)

    if is_bam(in_fn):
        return ngmlrmap_bam_in(in_fn=in_fn, ref_fa=ref_fa, out_bam=out_bam, nproc=nproc)
    elif is_fasta(in_fn) or is_fasta_gz(in_fn) or is_xml(in_fn):
        return ngmlrmap_fasta_in(in_fn=in_fn, ref_fa=ref_fa, out_bam=out_bam, nproc=nproc)
    else:
        raise ValueError("{!r} is neither bam nor dataset xml nor fasta".format(in_fn))


def make_ngmlr_index_cmd(in_fa):
    """return cmd string which generates ngmlr indices"""
    assert is_fasta(in_fa)
    return 'ngmlr -x pacbio --no-progress -t 1 -R 0.01 -r %s -q /dev/null 1>/dev/null' % in_fa


def prepare_ngmlr_reference_cmd(in_fa, out_fa):
    """Return a cmd string to copy or symlink fa, fai, ngmlr indices."""
    in_fai, in_ngm_1, in_ngm_2 = _fai(in_fa), _ngm_1(in_fa), _ngm_2(in_fa)
    out_fai, out_ngm_1, out_ngm_2 = _fai(out_fa), _ngm_1(out_fa), _ngm_2(out_fa)

    cmds = [ln_cmd(src=in_fa, dst=out_fa), # fa
            _link_or_make_fai_cmd(in_fai=in_fai, out_fa=out_fa), # fai
            _link_or_make_ngm_cmd(in_ngm_1=in_ngm_1, in_ngm_2=in_ngm_2, out_fa=out_fa)]
    return cmds2str(cmds)


def _ngm_1(in_fa):
    """Infer ngm file paths from in_fa"""
    return '%s%s' % (in_fa, '-enc.2.ngm')

def _ngm_2(in_fa):
    """Infer ngm file paths from in_fa"""
    return '%s%s' % (in_fa, '-ht-13-2.2.ngm')


def _link_or_make_ngm_cmd(in_ngm_1, in_ngm_2, out_fa):
    """If both in_ngm_1 and in_ngm_2 exist, symlink them as indices for out_fa.
    Otherwise, make ngmlr indices."""
    out_ngm_1, out_ngm_2 = _ngm_1(out_fa), _ngm_2(out_fa)
    cmds = []
    if op.exists(in_ngm_1) and op.exists(in_ngm_2):
        log.info("NGMLR indices %s, %s exist, make symbolic links" % (in_ngm_1, in_ngm_2))
        cmds.append(ln_cmd(in_ngm_1, out_ngm_1))
        cmds.append(ln_cmd(in_ngm_2, out_ngm_2))
    else:
        log.info("Generating NGMLR indices: %s, %s" % (out_ngm_1, out_ngm_2))
        cmds.append(rmpath_cmd(out_ngm_1))
        cmds.append(rmpath_cmd(out_ngm_2))
        cmds.append(make_ngmlr_index_cmd(out_fa))
    return cmds2str(cmds)
