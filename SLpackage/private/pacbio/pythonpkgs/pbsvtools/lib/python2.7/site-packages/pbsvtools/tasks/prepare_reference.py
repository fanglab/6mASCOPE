#! python

"""run `pbsvutil prepare_reference`, make a prepared reference set with fai and NGMLR indices."""
from __future__ import absolute_import

import logging
import sys

from pbsv1.config import SVConfig
from pbsv1.prepare_reference import prepare_reference
from pbcommand.models import FileTypes

from pbsvtools.basic import main, TCP_INPUT, TCP_OUTPUT, BaseConstants

log = logging.getLogger(__name__)


class Constants(BaseConstants):

    """
    Input - idx 0 referenceset.xml
    Output - idx 0, referenceset.xml with NGMLR indices prepared
             idx 1, an empty file as reference regions for pbsv call, purely used to meet pbsmrtpipe binding restrictions
    """
    # MUST HAVE
    TOOL_NAME = "prepare_reference"
    DESCRIPTION = "Prepare NGMLR indices for reference"

    INPUT_FILES = [
        TCP_INPUT(FileTypes.DS_REF, 'referenceset_in', 'Reference Set In', 'PacBio ReferenceSet'),
        TCP_INPUT(FileTypes.CFG, 'pbsv_config_in', 'pbsv Config In', 'pbsv Config')
    ]
    OUTPUT_FILES = [
        TCP_OUTPUT(FileTypes.DS_REF, "prepared_referenceset", "Prepared ReferenceSet with NGMLR indices", "prepared reference of `pbsvutil prepare-reference`", "prepared_referenceset"),
        TCP_OUTPUT(FileTypes.TXT, "ref_regions", "Reference Regions", "create an empty file as reference regions for pbsv call", "ref_regions")
    ]

    # OPTIONAL
    NPROC = 1


def run_main(i_ref_fn, i_cfg_fn, o_ref_fn, o_ref_regions_fn):
    """Prepare reference set"""
    log.info("Prepare reference set from %s to %s ", i_ref_fn, o_ref_fn)
    log.debug("args: %r", locals())
    cfg = SVConfig(i_cfg_fn)
    prepare_reference(in_ref=i_ref_fn, out_ref=o_ref_fn, aligner=cfg.subreads_aligner) # pylint: disable=no-member
    log.info("Create an empty file as referecnce regions input for pbsv call: %s ", o_ref_regions_fn)
    with open(o_ref_regions_fn, 'w') as writer:
        writer.write('') # nothing but make pbsmrtpipe bindings working
    return 0


def rtc_runner(rtc):
    """resolved tool contract runner."""
    return run_main(i_ref_fn=rtc.task.input_files[0],
                    i_cfg_fn=rtc.task.input_files[1],
                    o_ref_fn=rtc.task.output_files[0],
                    o_ref_regions_fn=rtc.task.output_files[1])


if __name__ == '__main__':
    sys.exit(main(args=sys.argv[1:], const=Constants, rtc_runner=rtc_runner, alog=log))
