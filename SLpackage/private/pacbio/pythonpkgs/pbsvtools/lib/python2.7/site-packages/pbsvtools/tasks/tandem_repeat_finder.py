#! python

"""run `pbsv trf`"""
from __future__ import absolute_import

import logging
import sys
import os.path as op
import csv
from pbcore.io import SubreadSet
from pbcommand.models import FileTypes
from pbsv1.utils import get_fa_from_referenceset_or_fa
from pbsv1.trf import find_tandemrepeats
from pbsv1 import Constants as C

from ..basic import main, TCP_INPUT, TCP_OUTPUT, BaseConstants

log = logging.getLogger(__name__)


class Constants(BaseConstants):
    """Constants used for pbsv align
    Input: idx 0 - ReferenceSet XML
           idx 1 - csv with columns: chr,size
    Output: idx 0 - bed.gz
    """
    TOOL_NAME = "tandem_repeat_finder"
    DESCRIPTION = "Find tandem repeats from chromosomes in reference genome and output bed"

    INPUT_FILES = [
        TCP_INPUT(FileTypes.DS_REF, 'in_referenceset', 'Reference Set In', 'PacBio ReferenceSet'),
        TCP_INPUT(FileTypes.CSV, 'in_chrs_csv', 'Chromosomes In', 'Chromosomes to apply TandemRepeatFinder'),
    ]

    OUTPUT_FILES = [
        TCP_OUTPUT(FileTypes.BED, "out_tandem_repeat_finder_bed",
                   "Tandem Repeats BED", "Tandem Repeats BED", "tandem_repeat_finder"),
    ]


def csv_to_chrs_lens_dict(i_csv_fn):
    """
    Read csv file and return {chr:len}
    """
    with open(i_csv_fn, 'r') as csvfile:
        return {r['chr']: r['size'] for r in csv.DictReader(csvfile)}


def run_main(i_ref_fn, i_csv_fn, o_bed_fn):
    """
    Find tandem repeats in reference genome.
    Output o_bed_fn -- tandem repeats BED.
    """
    log.info("Running tandem repeats finders")
    log.debug("Locals={}".format(locals()))

    chrs = csv_to_chrs_lens_dict(i_csv_fn).keys()
    log.info("Chromosomes are {}".format(chrs))
    reffa = get_fa_from_referenceset_or_fa(i_ref_fn)

    out_prefix = o_bed_fn[0:o_bed_fn.rfind('.')]
    writer = open(o_bed_fn, 'w')
    for idx, chrom in enumerate(chrs):
        idx_out_bed = "{}.{}.bed".format(out_prefix, idx)
        log.info("Finding tandem repeats in chromosome {}, and save to {}".format(chrom, idx_out_bed))
        find_tandemrepeats(reffa=reffa, out_bed=idx_out_bed, chrom=chrom, merge=True, k=C.TRF_K.val,
                           maxPeriod=C.TRF_MAXPERIOD.val, minCopies=C.TRF_MINCOPIES.val,
                           minLength=C.TRF_MINLENGTH.val, minMatchBp=C.TRF_MINMATCHBP.val,
                           minMatchFraction=C.TRF_MINMATCHFRACTION.val)
        for r in open(idx_out_bed, 'r'):
            if idx == 0 or not r.startswith('#'):
                writer.write(r)
    return 0


def rtc_runner(rtc):
    """resolved tool contract runner."""
    tmp_dir = str(rtc.task.tmpdir_resources[0].path) \
        if len(rtc.task.tmpdir_resources) > 0 else None
    return run_main(i_ref_fn=rtc.task.input_files[0],
                    i_csv_fn=rtc.task.input_files[1],
                    o_bed_fn=rtc.task.output_files[0])


def args_runner(args):
    log.info("Local args: {}".format(args))
    return run_main(i_ref_fn=args.in_referenceset,
                    i_csv_fn=args.in_chrs_csv,
                    o_bed_fn=args.out_tandem_repeat_finder_bed)


if __name__ == '__main__':
    sys.exit(main(args=sys.argv[1:], const=Constants, rtc_runner=rtc_runner, alog=log, args_runner=args_runner))
