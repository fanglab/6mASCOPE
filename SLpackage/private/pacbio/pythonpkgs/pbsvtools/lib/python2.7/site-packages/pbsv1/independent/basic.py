"""Mostly independent. All fast and simple.
"""
from __future__ import absolute_import

from ..io.VcfIO import BedReader
from .common import SvAnnot
import collections
import json
import sys


bed_tuple = collections.namedtuple('Bed', 'id, beg, end, svtype, svlen, strand, x0, x1, svann')
# https://genome.ucsc.edu/FAQ/FAQformat#format1

def get_svlengths_report_data(beds):
    """Given an iterable of BedRecords,
    return a dict-of-dict-of-list.

    {sample: {svtype: [lengths]}, ...}
    """
    result = {s: collections.defaultdict(list) for s in beds.samples}

    # only care about homo/hetero-zygous alternates
    alt_gt = ((0,1), # heterozygous ref/alt
              (1,1)) # homozygous alt/alt
    # only care about sv indels
    ok_svtypes = set(['Insertion', 'Deletion'])
    for bed in beds:
        svtype = str(bed.sv_type)
        length = abs(bed.sv_len) # sv_len to plot always be positive

        for s in bed.samples:
            gt = bed.fmts[s].gt
            if gt in alt_gt and svtype in ok_svtypes:
                result[s][svtype].append(length)

    return result # long lists, but no longer than the BED file itself

class Stats(object):
    def add(self, val):
        self.total += val
        self.n += 1
    def mean(self):
        return (self.total / float(self.n)) if self.n else 0
    def __repr__(self):
        return 'Stats(n={}, mean={}, sum={})'.format(
            self.n, self.mean(), self.total)
    def __init__(self):
        self.total = 0
        self.n = 0

svann_tuple = collections.namedtuple('SVAnn', 'ins_count, ins_sum, del_count, del_sum, insdel_count_sum, insdel_sum_sum')
svsample_tuple = collections.namedtuple('Sample', 'ins_count, ins_sum, del_count, del_sum, homz_count, hetz_count, insdel_count_sum, insdel_sum_sum')

def _get_svann_name(annotations):
    if not annotations:
        return 'Unannotated'
    svann = annotations[0]
    assert not isinstance(svann, str)
    svann_val = SvAnnot(svann).val
    return {
            SvAnnot.ALU: 'Alu',
            SvAnnot.L1: 'L1',
            SvAnnot.SVA_A: 'SVA',
            SvAnnot.TANDEM: 'Tandem Repeat',
            SvAnnot.OTHER: 'Unannotated',
    }[svann_val]

_logged_once = set()
def _log_once(msg): # pragma: no cover
    if msg not in _logged_once:
        sys.stderr.write('WARNING: {}\n'.format(msg))
        _logged_once.add(msg)

def get_svann_report_data(beds):
    """Given an iterable of BedRecords,
    return a dict of {table-name: [[row-name, value1, value2, ...]], ...}
    Include a final row of totals for CountByAnnotation table.
    """
    # count-by-annotation tracker
    anno_data = collections.defaultdict(lambda: collections.defaultdict(Stats))
    # count-by-sample tracker
    smpl_data = {s: collections.defaultdict(Stats) for s in beds.samples}

    # only care about homo/hetero-zygous alternates
    alt_gt = ((0,1), # heterozygous ref/alt
              (1,1)) # homozygous alt/alt

    for bed in beds:
        svann = _get_svann_name(bed.annotations)
        svtype = str(bed.sv_type)
        if svtype not in ['Insertion', 'Deletion']: # pragma: no cover
            _log_once('Cannot add {!r} to report.'.format(svtype))
            continue
        length = abs(bed.sv_len) # sv_len to plot in histogram must be positive
        anno_data[svann][svtype].add(length)

        # iterate over samples and track genotype and indel info for alten
        for s in bed.samples:
            gt = bed.fmts[s].gt
            if gt in alt_gt:
                smpl_data[s][gt].add(1)
                smpl_data[s][svtype].add(length)

    anno_result = list()

    for svann, sub in anno_data.iteritems():
        ins_count = 0
        ins_sum = 0
        del_count = 0
        del_sum = 0
        stats = sub.get('Insertion', Stats())
        ins_count = stats.n
        ins_sum = stats.total
        stats = sub.get('Deletion', Stats())
        del_count = stats.n
        del_sum = stats.total
        row = svann_tuple(
                ins_count, ins_sum,
                del_count, del_sum,
                ins_count + del_count, ins_sum + del_sum,
        )
        anno_result.append([svann] + list(row))
    final_row = ['Total'] + [sum(row[i] for row in anno_result) for i in range(1, 7)]
    anno_result.append(final_row)

    smpl_result = list()
    for sample, sub in smpl_data.iteritems():
        stats = sub.get('Insertion', Stats())
        ins_count = stats.n
        ins_sum = stats.total
        stats = sub.get('Deletion', Stats())
        del_count = stats.n
        del_sum = stats.total
        stats = sub.get((1,1), Stats())
        homz_count = stats.n
        stats = sub.get((0,1), Stats())
        hetz_count = stats.n
        row = svsample_tuple(
                ins_count, ins_sum,
                del_count, del_sum,
                homz_count, hetz_count,
                ins_count + del_count, ins_sum + del_sum,
        )
        smpl_result.append([sample] + list(row))

    return {'CountByAnnotation': anno_result, 'CountBySample': smpl_result}

def dump_svlengths_report_data(bed_ifs):
    """Given input-file-stream of BED,
    return JSON string of svlengths_report_data.
    """
    with BedReader(bed_ifs) as reader:
        return json.dumps(get_svlengths_report_data(reader))

def dump_svann_report_data(bed_ifs):
    """Given input-file-stream of BED,
    return JSON string of svann_report_data.
    """
    with BedReader(bed_ifs) as reader:
        return json.dumps(get_svann_report_data(reader))
