#! python

"""Make summary and length reports from BED file in pbsmrtpipe"""
from __future__ import absolute_import

import logging
import sys

from pbcommand.models import FileTypes
from pbsv1.independent.basic import dump_svlengths_report_data, dump_svann_report_data

from pbsvtools.basic import main, TCP_INPUT, TCP_OUTPUT, BaseConstants

log = logging.getLogger(__name__)


class Constants(BaseConstants):
    """Constants to build tool contract to make reports for sv summary and lengths in JSON.
    Input: idx 0 - structural_variants.bed
    Output: idx 0 - structural variant summary in JSON
            idx 1 - structural variant lengths in JSON
    """
    TOOL_NAME = 'make_reports'
    DESCRIPTION = "Make JSON reports from structural variants BED"

    INPUT_FILES = [
        TCP_INPUT(FileTypes.BED, 'structural_variants_bed', 'Structural Variants BED', 'structural variants BED')
    ]
    OUTPUT_FILES = [
        TCP_OUTPUT(FileTypes.JSON, "sv_anno", "Structural variants summary in JSON", "structural variant summary in JSON", "structural_variants_summary"),
        TCP_OUTPUT(FileTypes.JSON, "sv_lengths", "Structural variant lengths in JSON", "structural variant lengths in JSON", "structural_variants_lengths")
    ]


def run_main(i_bed_fn, o_anno_fn, o_len_fn):
    """ Make summary and lengths JSON reports from BED file."""
    log.debug("args: %r", locals())
    with open(o_anno_fn, "w+") as f:
        f.write(dump_svann_report_data(open(i_bed_fn)))
    with open(o_len_fn, "w+") as f:
        f.write(dump_svlengths_report_data(open(i_bed_fn)))
    return 0


def rtc_runner(rtc):
    """resolved tool contract runner."""
    return run_main(i_bed_fn=rtc.task.input_files[0],
                    o_anno_fn=rtc.task.output_files[0],
                    o_len_fn=rtc.task.output_files[1])


if __name__ == '__main__':
    sys.exit(main(args=sys.argv[1:], const=Constants, rtc_runner=rtc_runner, alog=log))
