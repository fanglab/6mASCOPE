#! python

"""Generate SVSIG files given AlignmentSet/ConsensusAlignmentSet datastore and tandem repeat bed"""
from __future__ import absolute_import

import logging
import sys
import os.path as op

from pbcommand.models import FileTypes
from pbcoretools.datastore_utils import datastore_to_datastorefile_objs

from pbsv1.independent.utils import execute_as_bash, realpath
from ..basic import main, TCP_INPUT, TCP_OUTPUT, BaseConstants


log = logging.getLogger(__name__)


class Constants(BaseConstants):
    """Constants
    Input: idx 0 - DataStore json AlignmentSet (or ConsensusAlignmentSet)
           idx 1 - TRF BED
    Output: idx 0 - FOFN of svsig.gz
    """
    TOOL_NAME = "align_json_to_svsig"
    DESCRIPTION = "Generate svsig.gz SV signature files from pbmm2 alignments, respecting TRF bed."

    INPUT_FILES = [
        TCP_INPUT(FileTypes.JSON, 'in_datastore', 'Read DataStore In',
                  'PacBio AlignmentSet or ConsensusAlignmentSet DataStore'),
        TCP_INPUT(FileTypes.BED, 'in_trf', 'Trandem Repeats', 'Tandem Repeats BED'),
    ]

    OUTPUT_FILES = [
        TCP_OUTPUT(FileTypes.FOFN, "out_svsig_gz", "FOFN of svsig.gz files", "FOFN of svsig.gz files", "svsig_gz"),
    ]
    ALLOWED_TYPES = (FileTypes.DS_ALIGN, FileTypes.DS_ALIGN_CCS)


def run_main(i_datastore_json, i_trf_fn, o_svsig_gz_fofn):
    """
    i_datastore_json is a datastore json of multiple AlignmentSet or ConsensusAlignmentSet files.

    Split each *AlignmentSet file to multiple chunked files, each of which must contain reads from
    only one movie. Call `pbsv discover` on each chunk file and generate svsig files. Finally,
    create o_svsig_gz_fofn -- FOFN of svsig.gz

    Note that: Each chunked file must NOT contain reads from more than one movie.
    Note that: Mixed  AlignmentSet and ConsensusAlignmentSet is not supported.
    """
    log.info("Discovering signatures from {}".format(i_datastore_json))
    log.debug("Locals={}".format(locals()))

    dataset_files = get_dataset_files(i_datastore_json)

    cmds = []
    o_svsig_gz_fns = []
    for idx, dataset_file in enumerate(dataset_files):
        prefix = op.join(op.dirname(o_svsig_gz_fofn), '{}'.format(idx))
        svsig_gz_fn = realpath(prefix + '.svsig.gz')
        c0 = pbsv_discover_cmd(trf_fn=i_trf_fn, bam_fn=dataset_file, o_svsig_gz_fn=svsig_gz_fn)
        cmds.append(c0)
        o_svsig_gz_fns.append(svsig_gz_fn)

    log.info("Running `pbsv discover` scripts")
    o_sh = op.join(op.dirname(o_svsig_gz_fofn), 'pbsv_discover_cmds.sh')
    execute_as_bash(cmds, o_sh)
    with open(o_svsig_gz_fofn, 'w') as writer:
        writer.write('\n'.join(o_svsig_gz_fns))
    return 0


def pbsv_discover_cmd(trf_fn, bam_fn, o_svsig_gz_fn):
    return 'pbsv discover -b {} {} {}'.format(trf_fn, bam_fn, o_svsig_gz_fn)


def get_dataset_files(i_datastore_fn):
    """
    i_datastore_fn --- Input datastore json file containing one or multiple AlignmentSet files,
    or one or multiple ConsensusAlignmentSet files. Mixed reads types are NOT supported.
    """
    datastore_objs, _, _, _ = datastore_to_datastorefile_objs(
        in_datastore_json=i_datastore_fn, allowed_types=Constants.ALLOWED_TYPES)
    return [f.path for f in datastore_objs]


def rtc_runner(rtc):
    """resolved tool contract runner."""
    return run_main(i_datastore_json=rtc.task.input_files[0],
                    i_trf_fn=rtc.task.input_files[1],
                    o_svsig_gz_fofn=rtc.task.output_files[0])


def args_runner(args):
    return run_main(i_datastore_json=args.in_datastore,
                    i_trf_fn=args.in_trf,
                    o_svsig_gz_fofn=args.out_svsig_gz)


if __name__ == '__main__':
    sys.exit(main(args=sys.argv[1:], const=Constants, rtc_runner=rtc_runner, alog=log, args_runner=args_runner))
