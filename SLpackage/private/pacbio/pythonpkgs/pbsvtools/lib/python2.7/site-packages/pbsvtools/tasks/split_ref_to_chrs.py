#! python

"""
Get chromosomes and their sizes in a reference genome,
write to a csv file of format: chr,size"""


from __future__ import absolute_import

import logging
import sys
import os.path as op
import csv

from pbcommand.models import FileTypes
from pbsv1.utils import get_fa_from_referenceset_or_fa
from pbsv1.libs import Fastafile

from ..basic import main, TCP_INPUT, TCP_OUTPUT, BaseConstants

log = logging.getLogger(__name__)


class Constants(BaseConstants):
    """Constants used for pbsv align
    Input: idx 0 - ReferenceSet XML
    Output: idx 0 - csv
    """
    TOOL_NAME = "split_ref_to_chrs"
    DESCRIPTION = "Get chromosomes and sizes from a reference genome."

    INPUT_FILES = [
        TCP_INPUT(FileTypes.DS_REF, 'in_referenceset', 'Reference Set In', 'PacBio ReferenceSet'),
    ]

    OUTPUT_FILES = [
        TCP_OUTPUT(FileTypes.CSV, "out_split_ref_to_chrs_csv", "Chromosomes and Sizes CSV",
                   "Get chromosomes and sizes from reference genoem", "split_ref_to_chrs"),
    ]


def run_main(i_ref_fn, o_csv_fn):
    """
    Write chromosomes and their sizes of a reference genome to o_csv_fn file.
    """
    log.info("Getting chromosomes and sizes from reference genome")
    log.debug("Locals={}".format(locals()))
    reffa = get_fa_from_referenceset_or_fa(i_ref_fn)
    reader = Fastafile(reffa)
    chrs_lens_to_csv(chrs=reader.references, lens=reader.lengths, o_csv_fn=o_csv_fn)


def chrs_lens_to_csv(chrs, lens, o_csv_fn):
    """
    Write each pair of zip(chrs, lens) to o_csv_fn which has two columns 'chr,size'
    """
    with open(o_csv_fn, 'w') as csvfile:
        fieldnames = ['chr', 'size']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()
        for chrom, size in zip(chrs, lens):
            writer.writerow({'chr': chrom.split(' ')[0], 'size': size})


def args_runner(args):
    log.info("Local args: {}".format(args))
    run_main(i_ref_fn=args.in_referenceset,
             o_csv_fn=args.out_split_ref_to_chrs_csv)


def rtc_runner(rtc):
    """resolved tool contract runner."""
    tmp_dir = str(rtc.task.tmpdir_resources[0].path) \
        if len(rtc.task.tmpdir_resources) > 0 else None
    return run_main(i_ref_fn=rtc.task.input_files[0],
                    o_csv_fn=rtc.task.output_files[0])


if __name__ == '__main__':
    sys.exit(main(args=sys.argv[1:], const=Constants,  rtc_runner=rtc_runner, alog=log, args_runner=args_runner))
