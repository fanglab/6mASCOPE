#! python

"""
Chunk input `split_chr.csv` file based on chromosome size
to scatter tandem repeat finder.
"""
from __future__ import absolute_import

import logging
import sys
import os.path as op

from pbcommand.cli import (pacbio_args_runner,
                           get_default_argparser_with_base_opts)
from pbcommand.utils import setup_log
from pbsvtools.tasks.split_ref_to_chrs import chrs_lens_to_csv
from pbsvtools.tasks.tandem_repeat_finder import csv_to_chrs_lens_dict
from pbsvtools.tasks.scatter_tandem_repeat_finder import chunk_chr_csv


log = logging.getLogger(__name__)
__version__ = "0.1"


def run_args(args):
    chunk_chr_csv_and_write(i_csv_fn=args.i_csv_fn, output_dir=args.output_dir, max_nchunks=args.max_nchunks)


def chunk_chr_csv_and_write(i_csv_fn, output_dir, max_nchunks):
    chr_chunks = chunk_chr_csv(i_csv_fn=i_csv_fn, max_nchunks=max_nchunks)
    chrs_lens_d = csv_to_chrs_lens_dict(i_csv_fn=i_csv_fn)

    chunks = []
    for i, chr_chunk in enumerate(chr_chunks):
        # each chr_chunk is a list of chrs., e.g., ['chr1', 'chr2']
        # WARNING: if chunk_id or output csv filename is changed, must update
        # chunk name to collect in sv.wdl.
        chunk_id = "_".join(["scatter_trf_chunk", str(i)])
        # write ref regions in ref_chunk to a file
        csv_chunk_fn = op.join(output_dir, chunk_id + '.csv')
        len_chunk = [chrs_lens_d[chrom] for chrom in chr_chunk]
        log.debug("Write chunk of id {} to {}.".format(i, csv_chunk_fn))
        chrs_lens_to_csv(chrs=chr_chunk, lens=len_chunk, o_csv_fn=csv_chunk_fn)
    return 0


def _get_parser():
    p = get_default_argparser_with_base_opts(
        version=__version__,
        description=__doc__,
        default_level="INFO")
    p.add_argument("i_csv_fn", type=str, help="Input csv produced by split_ref_to_chrs.py, containing two columns: chr,size")
    p.add_argument("output_dir", type=str, help="Output directory")
    p.add_argument("max_nchunks", type=int, help="Split input into at most max_nchunks chunks.")
    return p


def main(argv=sys.argv):
    return pacbio_args_runner(
        argv=argv[1:],
        parser=_get_parser(),
        args_runner_func=run_args,
        alog=log,
        setup_log_func=setup_log)


if __name__ == "__main__":
    sys.exit(main(sys.argv))
