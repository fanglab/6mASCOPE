from __future__ import absolute_import

from .independent.utils import (_merge_bam_cmd, _sort_bam_cmd, _index_bam_cmd, is_xml, is_fasta, is_bam,
        autofmt, realpath, rmpath, execute, readname2moviename)
from pbcore.io import ReferenceSet

"""Define utils that have dependency"""
_SM_TAG_NAME_ = 'sm'
_RG_TAG_NAME_ = 'RG'

def get_fa_from_referenceset_or_fa(fn):
    """return fasta file name from a reference set or a fasta"""
    ret = fn
    if is_xml(fn): # in case a referenceset does not ends with 'referenceset.xml'
        ds = ReferenceSet(fn)
        if not len(ds.toExternalFiles()) == 1:
            raise ValueError("Referenceset {!r} contains more than one FASTA file.".format(fn))
        ret  = str(ds.toExternalFiles()[0])

    if is_fasta(ret):
        return ret
    else:
        raise ValueError("Could not get reference FASTA file from Referenceset {!r}".format(fn))


def merge_and_sort_bam(i_bam_fns, o_bam_fn, nproc=8, tmp_dir=None):
    """Merge input bam files to output bam file, also make bai index"""
    if not is_bam(o_bam_fn):
        raise ValueError('{!r} is not a bam file'.format(o_bam_fn))
    usorted_bam_fn = o_bam_fn[:-3] + 'unsorted.bam'
    try:
        c1 = _merge_bam_cmd(i_bam_fns=i_bam_fns, o_bam_fn=usorted_bam_fn, nproc=nproc) # merge
        c2 = _sort_bam_cmd(i_bam_fn=usorted_bam_fn, o_bam_fn=o_bam_fn, nproc=nproc, tmp_dir=tmp_dir) # sort
        c3 = _index_bam_cmd(i_bam_fn=o_bam_fn, nproc=nproc)
        execute('%s && %s && %s' % (c1, c2, c3))
    finally:
        # If there was an exception and we forget to remove this, and if this was a read-only file,
        # then we would fail on retry since we cannot write over a read-only file.
        rmpath(usorted_bam_fn) # clean up


def merge_bam(i_bam_fns, o_bam_fn, nproc=8):
    """Merge input bam files into output bam file, also make bai index
    Input files are sorted and merged bam files are sorted as well.
    """
    if not is_bam(o_bam_fn):
       raise ValueError('{!r} is not a bam file'.format(o_bam_fn))
    c1 = _merge_bam_cmd(i_bam_fns=i_bam_fns, o_bam_fn=o_bam_fn, nproc=nproc) # merge
    c2 = _index_bam_cmd(i_bam_fn=o_bam_fn, nproc=nproc)
    execute('%s && %s' % (c1, c2))


def get_seq_from_pysam_fastafile(pysam_fastafile_obj, name, start=None, end=None):
    """Get sequence from a pysam Fastafile
    name - read name
    start - start pos, 0 based, inclusive
    end - end pos, 0 based, exclusive
    """
    if start is None:
        start = 0
    l = pysam_fastafile_obj.get_reference_length(name)
    if end is None:
        end = l
    if start > end:
        raise ValueError("Start = %s > End = %s" % (start, end))
    if end > l:
        raise ValueError("End = %s > length of %r = %r!" % (end, name, l))
    seq = pysam_fastafile_obj.fetch(reference=name, start=start, end=end)
    return seq


def modify_alignedseg_sample_tag(record, sample_str):
    """Set the 'sm' tag to input AlignedSegment object and return modified object.
    record --- AlignedSegment
    sample_str --- value of sample tag
    """
    return modify_alignedseg_string_tag(record, _SM_TAG_NAME_, sample_str)


def modify_alignedseg_rg_tag(record, rg_str):
    """Set the read group 'RG' tag to input AlignedSegment object and return modified object.
    record --- AlignedSegment
    rg_str --- value of RG read group tag
    """
    return modify_alignedseg_string_tag(record, _RG_TAG_NAME_, rg_str)


def modify_alignedseg_string_tag(record, tag_key, tag_value):
    """Set tag tag_key to input AlignedSegment object and return modified object.
    record --- AlignedSegment
    tag_value --- tag value
    """
    from .libs import AlignedSegment # TODO: Move to top of file.
    assert isinstance(record, AlignedSegment)
    try:
        record.set_tag(tag=tag_key, value=str(tag_value), replace=True)
        return record
    except Exception as e:
        raise ValueError("Could not set tag %s with value %s to AlignedSegment: %s" % (tag_key, tag_value, str(e)))


def get_moviename_from_alignedseg(alignedseg):
    """Get movie name from an AlignedSeg object."""
    return readname2moviename(alignedseg.query_name)


def _get_tag_from_alignedseg(alignedseg, tag_name, tag_desc):
    """Get tag from AlignedSeg object, raise ValueError if failed"""
    try:
        return alignedseg.get_tag(tag=tag_name)
    except Exception as e:
        raise ValueError("Could not get {desc} tag {name} from AlignedSegment: {aln}, {err}".format(name=tag_name, desc=tag_desc, aln=alignedseg, err=str(e)))


def get_readgroup_from_alignedseg(alignedseg):
    """Get read group from AligneSeg object."""
    return _get_tag_from_alignedseg(alignedseg, _RG_TAG_NAME_, 'read group')

def get_sample_from_alignedseg(alignedseg):
    """Get sample from AligneSeg object."""
    return _get_tag_from_alignedseg(alignedseg, _SM_TAG_NAME_, 'Sample')
