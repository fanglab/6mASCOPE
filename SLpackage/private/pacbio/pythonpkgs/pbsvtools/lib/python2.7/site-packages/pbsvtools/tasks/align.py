#! python

"""run `pbsv align`"""
from __future__ import absolute_import

import logging
import sys

from pbcommand.models import FileTypes
from pbsv1.config import SVConfig, reset_cfg_nproc
from pbsv1.run import svalign

from pbsvtools.basic import main, TCP_INPUT, TCP_OUTPUT, BaseConstants

log = logging.getLogger(__name__)


class Constants(BaseConstants):
    """Constants used for pbsv align
    Input: idx 0 - pbsv.cfg
           idx 1 - subreadset.xml
           idx 2 - referenceset.xml
    Output: idx 0 - chained sorted alignments in bam
    """
    TOOL_NAME = "align"
    DESCRIPTION = "Align subreads to reference using NGMLR, mark duplicates, chain alignments and sort."

    INPUT_FILES = [
        TCP_INPUT(FileTypes.CFG, 'pbsv_config_in', 'pbsv Config In', 'pbsv Config'),
        TCP_INPUT(FileTypes.DS_SUBREADS, 'subreads_in', 'SubreadSet In', 'PacBio SubreadSet'),
        TCP_INPUT(FileTypes.DS_REF, 'referenceset_in', 'Reference Set In', 'PacBio ReferenceSet'),
        TCP_INPUT(FileTypes.JSON, 'movienames2samples_in', 'Movie names to samples JSON In', 'Link movie names to samples')
    ]

    OUTPUT_FILES = [
        TCP_OUTPUT(FileTypes.BAM, "sorted_chained", "Aligned reads", "sorted chained Bam alignments of `pbsv align`", "sorted_chained")
    ]


def run_main(i_cfg_fn, i_sr_fn, i_ref_fn, i_m2s_json_fn, o_bam_fn, tmp_dir, nproc):
    """align reads in i_sr_fn to i_ref_fn using NGMLR, mark duplicates,
    chain alignments, sort alignments and save to o_bam_fn
    i_m2s_json_fn --- input json file containing a list of (movie, sample) tuples.
    """
    log.info("Reading pbsv config file %s", i_cfg_fn)
    log.debug("args: %r", locals())
    cfg = SVConfig(i_cfg_fn)
    if nproc is not None and nproc >= 1: # override cfg.nproc
        reset_cfg_nproc(cfg, nproc)
    log.info("pbsv align using nproc %s" % cfg.nproc)
    log.debug("svalign(ref_fn=%r, in_fn=%r, out_bam=%r, cfg=cfg, tmp_dir=%s)", i_ref_fn, i_sr_fn, o_bam_fn, tmp_dir)
    log.debug("cfg=%r", cfg)
    svalign(ref_fn=i_ref_fn, in_fn=i_sr_fn, out_bam=o_bam_fn, cfg=cfg, tmp_dir=tmp_dir, movienames2samples_json=i_m2s_json_fn)
    return 0


def rtc_runner(rtc):
    """resolved tool contract runner."""
    tmp_dir = str(rtc.task.tmpdir_resources[0].path) \
            if len(rtc.task.tmpdir_resources) > 0 else None
    return run_main(i_cfg_fn=rtc.task.input_files[0],
                    i_sr_fn=rtc.task.input_files[1],
                    i_ref_fn=rtc.task.input_files[2],
                    i_m2s_json_fn=rtc.task.input_files[3],
                    o_bam_fn=rtc.task.output_files[0],
                    tmp_dir=tmp_dir,
                    nproc=rtc.task.nproc)


if __name__ == '__main__':
    sys.exit(main(args=sys.argv[1:], const=Constants, rtc_runner=rtc_runner, alog=log))
