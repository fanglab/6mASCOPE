"""
Refactored from pbcore, but same underlying code.
"""
from __future__ import absolute_import

from cStringIO import StringIO


def split_file_contents(f, delimiter, BLOCKSIZE=8192):
    """
    Same semantics as f.read().split(delimiter), but with memory usage
    determined by largest chunk rather than entire file size
    """
    remainder = StringIO()
    while True:
        block = f.read(BLOCKSIZE)
        if not block:
            break
        parts = block.split(delimiter)
        remainder.write(parts[0])
        for part in parts[1:]:
            yield remainder.getvalue()
            remainder = StringIO()
            remainder.write(part)
    yield remainder.getvalue()


def fasta_name_seq(s):
        """
        Interprets a string as a FASTA record.  Does not make any
        assumptions about wrapping of the sequence string.
        """
        DELIMITER = ">"
        try:
            lines = s.splitlines()
            assert len(lines) > 1
            assert lines[0][0] == DELIMITER
            name = lines[0][1:]
            sequence = "".join(lines[1:])
            return (name, sequence)
        except AssertionError:
            raise ValueError("String not recognized as a valid FASTA record")


def read_fasta(f):
        try:
            parts = split_file_contents(f, ">")
            n = next(parts)
            assert "" == n
            for part in parts:
                yield fasta_name_seq(">" + part)
        except AssertionError:
            raise ValueError("Invalid FASTA file")
