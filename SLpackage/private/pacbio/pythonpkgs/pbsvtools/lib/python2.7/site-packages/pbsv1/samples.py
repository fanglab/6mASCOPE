"""Parse input dataset xml and get links from movies to biologiacl samples."""
from __future__ import absolute_import

import logging
import json
from pbcore.io import SubreadSet
from .independent.utils import assert_items_unique, sanitize_samples


def write_as_list_to_json(d, fn):
    """Write a dict as a list of (key, val) tuples to json file."""
    json.dump([(k, v) for k, v in d.iteritems()], open(fn, 'w'))


def get_samples_from_ds(ds_fn):
    """Given a SubreadSet dataset filename, return {movie: sanitized_sample}"""
    log = logging.getLogger(__name__)
    ds = SubreadSet(ds_fn)

    # set sensible default for sample names
    movie2sample_dict = {movie: 'UnnamedSample' for movie in set(ds.movieIds.keys())}
    try:
        movie2sample_dict.update(ds.getMovieSampleNames())
    except ValueError as e:
        # Missing or malformed BioSample definition, log but continue
        log.warning(e)
    except KeyError as e:
        # Occurs on duplicate collections, log but continue
        log.warning(e)

    samples = sorted(set(movie2sample_dict.values()))
    # sanitize samples to match pattern RE.
    sample_sanitized_sample_dict = sanitize_samples(samples)

    # replace sample by sanitized sample in movie2sample_dict
    movie_sanitized_sample_dict = {movie:sample_sanitized_sample_dict[sample] for movie, sample in movie2sample_dict.iteritems()}
    return sample_sanitized_sample_dict, movie_sanitized_sample_dict


def make_samples(ds_fn, movie_sanitized_sample_fn, sample_sanitized_sample_fn):
    """Given a SubreadSet dataset filename, get {movie: sanitized_sample}, and
    write it to movie_sanitized_sample_fn, get {sample: sanitized_sample}, and
    write it to sample_sanitized_sample_fn.
    """
    sample_sanitized_sample_dict, movie_sanitized_sample_dict = get_samples_from_ds(ds_fn)

    write_as_list_to_json(movie_sanitized_sample_dict, movie_sanitized_sample_fn)
    write_as_list_to_json(sample_sanitized_sample_dict, sample_sanitized_sample_fn)
