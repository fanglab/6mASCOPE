#! python

"""Gather a list of FOFN files to one FOFN."""
from __future__ import absolute_import

import logging
import sys

from pbcommand.models import FileTypes
from ..basic import TCP_INPUT, TCP_OUTPUT, BaseGatherConstants, gather_main, gather_run_main

log = logging.getLogger(__name__)

class Constants(BaseGatherConstants):
    """Constants used for gathering a list of FOFN files.
    output idx 0: concatenated fofn
    """
    TOOL_NAME = "gather_bam_fofn"
    DESCRIPTION = "BAM FOFN GATHER"
    CHUNK_KEY = "$chunk.bam_fofn_id"
    DEFAULT_OUT_NAME = "gathered_bam"

    OUTPUT_FILES = [
        TCP_OUTPUT(FileTypes.FOFN, "bam_fofn_out", "FOFN", "Gathered BAM FOFN", DEFAULT_OUT_NAME)
    ]


def concat_fofn(i_fofn_fns, o_fofn_fn, nproc=1):
    """
    concatenate a list of fofn files.
    """
    with open(o_fofn_fn, 'w') as writer:
        for i_fofn_fn in i_fofn_fns:
            for r in open(i_fofn_fn, 'r'):
                writer.write(r.strip()+'\n')


def rtc_runner(rtc):
    """
    :type rtc: pbcommand.models.ResolvedToolContract
    :return:
    """
    return gather_run_main(chunk_json=rtc.task.input_files[0],
                           chunk_key=Constants.CHUNK_KEY,
                           gathered_fn=rtc.task.output_files[0],
                           ln_name=Constants.DEFAULT_OUT_NAME,
                           gather_func=concat_fofn)


if __name__ == '__main__':
    sys.exit(gather_main(args=sys.argv[1:], const=Constants, rtc_runner=rtc_runner, alog=log))
