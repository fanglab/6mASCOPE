from __future__ import absolute_import

from .independent.utils import is_referenceset_xml, is_fasta, is_xml, execute
from .utils import get_fa_from_referenceset_or_fa
from .ngmlrmap import prepare_ngmlr_reference_cmd
from .minimap2_map import prepare_minimap2_reference_cmd
from pbcore.io import ReferenceSet

def prepare_reference(in_ref, out_ref, aligner):
    """Prepare reference for either ngmlr or minimap2
    """
    if aligner == 'ngmlr':
        _prepare_reference(in_ref, out_ref, prepare_reference_cmd_f=prepare_ngmlr_reference_cmd)
    elif aligner == 'minimap2':
        _prepare_reference(in_ref, out_ref, prepare_reference_cmd_f=prepare_minimap2_reference_cmd)
    else:
        raise ValueError('Subreads aligner {} must either be ngmlr or minimap2.'.format(aligner))


def _prepare_reference(in_ref, out_ref, prepare_reference_cmd_f):
    """Given in_ref FASTA or XML, make out_ref FASTA or XML.

    in_ref FASTA file (which can be inferred from XML) must exist.
    If out_ref is {out}.referenceset.xml, create {out}.fasta.

    Call prepare_ngmlr_reference_cmd to make symbolic link of index files if they exists
    or create index files if they do not exist. Index files can be FAI, NGM or MMI.
    """
    in_fa = get_fa_from_referenceset_or_fa(in_ref)

    out_fa = out_ref
    if is_referenceset_xml(out_ref):
        out_fa = out_ref[:-len(".referenceset.xml")] + '.fasta'
    elif is_xml(out_ref):
        out_fa = out_ref[:-len(".xml")] + '.fasta'
    elif not is_fasta(out_ref):
        raise ValueError("Output reference file %s must be either fasta or referenset.xml." % out_ref)

    cmd = prepare_reference_cmd_f(in_fa=in_fa, out_fa=out_fa)
    execute(cmd)

    if is_xml(out_ref):
        d = ReferenceSet(out_fa, generateIndices=False)
        d.makePathsAbsolute()
        d.write(out_ref)
