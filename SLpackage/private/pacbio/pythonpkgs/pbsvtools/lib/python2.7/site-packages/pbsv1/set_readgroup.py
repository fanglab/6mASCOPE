"""Mark the sample tag 'RG' in alignments, and add `SM` to `RG` read group of BAM header"""
from __future__ import absolute_import

from .libs import AlignmentFile, AlignedSegment
from .utils import autofmt, readname2moviename
from .markdup import make_readgroups
from .io.bamstream import _open, get_movienames2readgroups_from_header, get_bam_header
from .utils import modify_alignedseg_rg_tag


def modify_all_alignedsegs_in_bam(i_bam_fn, o_bam_fn, modify_alignedseg_f, header=None):
    """Modify every alignments in input file i_bam_fn and write modified alignments to o_bam_fn
    modify_alignedseg_f --- a function which takes an aligned segment as input, modify it and return it.
    header --- if not None, use it as template for output bam header.
               Otherwise, copy header from input to output
    """
    i_bam_fn, infmt = autofmt(i_bam_fn, ("bam", "sam", "subreadset.xml"), "bam")
    dummy, outfmt = autofmt(o_bam_fn, ("bam", "sam"), "bam")
    writer_mode = "w" + ("b" if outfmt == "bam" else "h")
    with _open(i_bam_fn, infmt) as reader:
        header = header if header is not None else reader.header
        with AlignmentFile(o_bam_fn, writer_mode, header=header) as writer:
            for aln in reader:
                writer.write(modify_alignedseg_f(aln))


def modify_readgroups_of_bam(i_bam_fn, o_bam_fn, movienames2samples_json, readgroups):
    """
    readgroups --- set output header['RG']
    Copy input bam to output bam:
      * add `SM` tag to `RG` groups of output bam header if movienames2samples_json is specified,
      * add `RG` tag to all alignments.
    """
    template_header = get_bam_header(i_bam_fn)
    template_header['RG'] = readgroups
    movienames2readgroups = get_movienames2readgroups_from_header(template_header) # {moviename: readgroup}

    def modify_alignedseg_rg_tag_f(record):
        """Modify the RG tag of an alignment record."""
        moviename = readname2moviename(record.query_name)
        if not moviename in movienames2readgroups:
            raise ValueError("Could not find read group ID of movie {moviename} from {template_bam}.".
                             format(moviename=moviename, template_bam=i_bam_fn))
        return modify_alignedseg_rg_tag(record, movienames2readgroups[moviename])

    modify_all_alignedsegs_in_bam(i_bam_fn, o_bam_fn, modify_alignedseg_rg_tag_f, header=template_header)


def get_sm_tag_from_alignedseg(aln):
    """Get 'sm' tag from AlignedSegment."""
    try:
        return aln.get_tag('sm')
    except Exception as e:
        raise ValueError("Could not get 'sm' tag from {aln}".format(aln=aln))
