"""
Define default parameters for pbsv1.
"""
from __future__ import absolute_import

from collections import namedtuple
PARAM = namedtuple('PARAM', ['name', 'val', 'type', 'display_name', 'desc'])

"""Define aligner"""
SUBREADS_ALIGNER = PARAM('subreads_aligner', 'ngmlr', str, 'subreads aligner',
                         'Aligner used to align subreads to reference, choices=[ngmlr, minimap2]')
ALIGN_PARAMS = [SUBREADS_ALIGNER]


"""Define mark duplicates params as constants"""
TOLERANCE = PARAM("tolerance", 100, int, "tolerance",
                  "basepair tolerance for coordinate equivalence")
SAMZMW = PARAM("samezmw", False, bool, "samezmw",
               "limit duplicate marking to subreads from the same ZMW")
ONESIDED = PARAM("onesided", False, bool, "onesided",
                 "consider alignments equivalent if either start or end coordinate  are same")
MARKDUP_PARAMS = [TOLERANCE, SAMZMW, ONESIDED]


"""Define svcall alignment filter params as constants"""
SVLENGTH = PARAM("svlength", 50, int, "Minimum Length of Structural Variant (bp)",
                 "A structural variant must involve at least this many basepairs to be output.")
GAPDISTANCE = PARAM("gapdistance", 1000, int, "minimum distance from reference gap (bp)",
                    "A structural variant must be at least this far from a reference gap to be output.")
MINREADCOUNT = PARAM("min_readcount", 2, int, "Minimum Reads That Support Variant (Count)",
                     "At least this number of reads must provide evidence for a structural variant to output it. Separate subreads from a ZMW count only once.")
MINREADPERCENTAGE = PARAM("min_readpercentage", 20, float, "Minimum Percentage of Reads That Support Variant (%)",
                        "At least this percentage of reads that span a structural variant locus must provide evidence for a variant to output it. Separate subreads from a ZMW count only once for support and overall coverage.")
DOWNSAMPLE_WINDOWLENGTH = PARAM("downsample_windowlength", 1000, int, "Number of Base Pairs in Each DownSample Window", "Number of Base Pairs in Each Down Sample Window")
DOWNSAMPLE_MAXREADCOUNT = PARAM("downsample_max_readcount", 15, int, "Maximum number of Read Count per Down Sample Window", "At most this number of alignments per window will be used to provide evidence for a variant. 0 means downsampling will be disabled")
DOWNSAMPLE_RANDOMSEED = PARAM("downsample_randomseed", 0, int, "Random Number Generator Seed", "Random Number Generator Seed")
SVCALL_FILTER_PARAMS = [SVLENGTH, GAPDISTANCE, MINREADCOUNT, MINREADPERCENTAGE, DOWNSAMPLE_WINDOWLENGTH, DOWNSAMPLE_MAXREADCOUNT, DOWNSAMPLE_RANDOMSEED]


# Define params comparing similarity of sv calls.
# Note that these parameters are not exposed to config.
LENGTHWIGGLE = PARAM("lengthwiggle", 0.25, float, "lengthwiggle",
                     "Maximum percentage difference in length between similar sv calls)")
POSITIONWIGGLE = PARAM("positionwiggle", 200, int, "positionwiggle",
                       "Maximum distance between end points of similar sv calls")
BASEPAIRIDWIGGLE = PARAM("basepairidwiggle", 0.25, float, "basepairidwiggle",
                         "Maximum base pair identity difference from the reference sequence between similar sv calls")
SVCALL_SIMILARITY_PARAMS = [LENGTHWIGGLE, POSITIONWIGGLE, BASEPAIRIDWIGGLE]


""" Default svcall alignment parameters.  """
SVCALL_MINMAPQ = PARAM("call_min_mapq", 10, int, "call_min_mapq",
                       "minimum mapping quality not to filter an alignment in sv call")
QCFAIL = PARAM("qcfail", False, bool, "qcfail",
               "include QC fail alignments with flag 0x200")
DUPLICATE = PARAM("duplicate", False, bool, "duplicate",
                  "include duplicate alignments with flag 0x400")
SECONDARY = PARAM("secondary", False, bool, "secondary",
                  "include secondary alignments with flag 0x100")
SVCALL_ALIGNMENT_PARAMS = [SVCALL_MINMAPQ, QCFAIL, DUPLICATE, SECONDARY]


"""Define svcall filter params as constants"""
MAXINDELWINDOWSIZE = PARAM(
    "wsizemax", 0, int, "wsizemax", "window to scan for excess of indels")
MARGIN = PARAM("margin", 100, int, "margin",
               "margin to alignment end in reference basepairs")
SVCALL_SCORE_PARAMS = [MAXINDELWINDOWSIZE, MARGIN]


"""Default chain gap params"""
MAXGAP = PARAM("chain_max_gap", 100000, int, "chain_max_gap", "maximum basepair gap over which to chain")
MAX_INVERSION_POSWIGGLE = PARAM("inversion_poswiggle", 2000, int, "inversion_poswiggle", "maximum basepair gap or overlap between inversion and flanking alignments")
CHAIN_GAP_PARAMS = [MAXGAP, MAX_INVERSION_POSWIGGLE]


"""Default chain alignment params"""
CHAIN_MINMAPQ = PARAM("chain_min_mapq", 20, int, "chain_min_mapq",
                      "minimum mapping quality to chain an alignment")
CHAIN_ALIGNMENT_PARAMS = [CHAIN_MINMAPQ]


"""Default sge and computational resource parameters"""
NPROC = PARAM("nproc", 4, int, "nproc", "Number of processors to use per job.")
TMPDIR = PARAM("tmp_dir", "/scratch/", str, "tmp_dir", "Local temp dir, e.g., /scratch/")
SGE_PARAMS = [NPROC, TMPDIR]

CHAIN_PARAMS = CHAIN_GAP_PARAMS + CHAIN_ALIGNMENT_PARAMS
SVCALL_PARAMS = SVCALL_FILTER_PARAMS + SVCALL_SIMILARITY_PARAMS + \
    SVCALL_ALIGNMENT_PARAMS + SVCALL_SCORE_PARAMS


"""Tandem Repeat finder"""
TRF_K = PARAM("k", 8, int, "k", "kmer size to use for repeat matching (default: %(default)s)")
TRF_MAXPERIOD = PARAM("maxPeriod", 2000, int, "maxPeriod", "maximum repeat period size to consider, bp (default: %(default)s)")
TRF_MINCOPIES = PARAM("minCopies", 1.5, float, "minCopies", "minimum copies of tandem repeat (default: %(default)s)")
TRF_MINLENGTH = PARAM("minLength", 50, int, "minLength", "minimum length of a tandem repeat run, bp (default: %(default)s)")
TRF_MINMATCHBP = PARAM("minMatchBp", 30, int, "minMatchBp", "minimum basepairs in kmer matches in the tandem repeat run (default: %d(default)s)")
TRF_MINMATCHFRACTION = PARAM("minMatchFraction", 0.25, float, "minMatchFraction", "minimum fraction of basepairs in kmer matches in the tandem repeat run (default: %d(default)s)")
