from __future__ import absolute_import

def ngmlr_stdin_in_cmd(ref_fa, out_bam, nproc):
    """Return ngmlr call, read from stdin, output to bam.
    (If does not read from stdin, try -q /dev/stdin)
    """
    # NGMLR --subread-length controls minimum length of detectable alignments, default 256
    # runtime using --subread-length 50 is 1.5~2 fold longer than default (2.5 ~ 3 fold ratio)
    return """ngmlr -x pacbio -R 0.01 --max-segments 3 --subread-length 150 --no-progress --bam-fix -t {nproc} -r {ref_fa} -o {out_bam}"""\
        .format(nproc=nproc, ref_fa=ref_fa, out_bam=out_bam)


def ngmlrmap_bam_in_cmd(in_fn, ref_fa, out_bam, nproc=4):
    """Return cmd which calls ngmlr to map reads in bam to reference"""
    samtool_cmd = """samtools view {in_fn}""".format(in_fn=in_fn)
    awk_cmd = """LD_LIBRARY_PATH= awk '{ print ">" $1; print $10; if ($11 != "*") { print "+"; print $11; } }'"""
    ngmlr_cmd = ngmlr_stdin_in_cmd(ref_fa=ref_fa, out_bam=out_bam, nproc=nproc)
    cmds = [samtool_cmd, awk_cmd, ngmlr_cmd]
    cmd = ' | '.join(cmds)
    return cmd


def ngmlrmap_fasta_in_cmd(in_fn, ref_fa, out_bam, nproc=4):
    """Return cmd which calls ngmlr to map reads in fasta to reference"""
    # x2fasta to read from fasta, fasta.gz
    cat_cmd = """pbsv1util x2fasta {in_fn}""".format(in_fn=in_fn)
    # awk to collapse multi-line FASTA/Q into a single line version
    awk_cmd = """LD_LIBRARY_PATH= awk '{if($0 ~ /^[>+@]/) { if(s){print n; print s;} n=$0; s=""; } else {s=s $0;}} END{if(s){print n; print s;}}'"""
    ngmlr_cmd = ngmlr_stdin_in_cmd(ref_fa=ref_fa, out_bam=out_bam, nproc=nproc)
    cmds = [cat_cmd, awk_cmd, ngmlr_cmd]
    cmd = ' | '.join(cmds)
    return cmd
