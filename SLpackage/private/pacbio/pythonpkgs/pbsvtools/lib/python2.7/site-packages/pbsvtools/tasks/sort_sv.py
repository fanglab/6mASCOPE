#! python

"""Gather multiple bed."""
from __future__ import absolute_import

import logging
import sys
from pbcommand.models import FileTypes
from pbsv1.sort_sv import sort_sv
from pbsvtools.basic import main, TCP_INPUT, TCP_OUTPUT, BaseConstants

log = logging.getLogger(__name__)


class Constants(BaseConstants):
    """Constants used for pbsv sort_sv
    Input: idx 0 - alignments.bam
           idx 1 - unsorted.structural_variants.bed
           idx 2 - unsorted.structural_variants.vcf
    Output: idx 0 - sorted.structural_variants.bed
            idx 1 - sorted.structural_variants.vcf
    """
    TOOL_NAME = "sort_sv"
    DESCRIPTION = "Sort structural variants by chromosome order as listed in alignments bam."

    INPUT_FILES = [
        TCP_INPUT(FileTypes.BAM, 'align_bam', 'BAM Alignments In', 'alignments'),
        TCP_INPUT(FileTypes.BED, "structural_variants_bed", "Structural Variants", "structural variants in BED"),
        TCP_INPUT(FileTypes.VCF, "structural_variants_vcf", "Structural Variants", "structural variants in VCF"),
    ]

    OUTPUT_FILES = [
        TCP_OUTPUT(FileTypes.BED, "structural_variants_bed", "Structural variants", "sorted structural variants in BED", "structural_variants"),
        TCP_OUTPUT(FileTypes.VCF, "structural_variants_vcf", "Structural variants", "sorted structural variants in VCF", "structural_variants"),
    ]


def run_main(i_aln_fn, i_bed_fn, i_vcf_fn, o_bed_fn, o_vcf_fn):
    """Sort input BED|VCF file and save to output."""
    log.info("Sort structural variants in {!r} to {!r}".format(i_bed_fn, o_bed_fn))
    log.debug("args: %r", locals())
    sort_sv(i_bed_fn, i_aln_fn, o_bed_fn)
    sort_sv(i_vcf_fn, i_aln_fn, o_vcf_fn)
    return 0


def rtc_runner(rtc):
    """resolved tool contract runner."""
    return run_main(i_aln_fn=rtc.task.input_files[0],
                    i_bed_fn=rtc.task.input_files[1],
                    i_vcf_fn=rtc.task.input_files[2],
                    o_bed_fn=rtc.task.output_files[0],
                    o_vcf_fn=rtc.task.output_files[1])


if __name__ == '__main__':
    sys.exit(main(args=sys.argv[1:], const=Constants, rtc_runner=rtc_runner, alog=log))
