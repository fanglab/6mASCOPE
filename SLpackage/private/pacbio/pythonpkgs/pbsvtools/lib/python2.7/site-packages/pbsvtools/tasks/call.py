#! python

"""Run `pbsv call` in pbsmrtpipe"""
from __future__ import absolute_import

import logging
import sys

from pbcommand.models import FileTypes
from pbsv1.independent.common import to_ref_regions
from pbsv1.io.bamstream import sanitize_ref_regions
from pbsv1.call import svcall
from pbsv1.config import SVConfig, reset_cfg_nproc

from pbsvtools.basic import main, TCP_INPUT, TCP_OUTPUT, BaseConstants

log = logging.getLogger(__name__)


class Constants(BaseConstants):
    """Constants to build tool contract for `pbsv call`
    Input: idx 0 - pbsv.cfg
           idx 1 - sorted_chained.bam
           idx 2 - referenceset.xml
    Output: idx 0 - structural variants in BED
            idx 1 - structural variants in VCF
    """
    TOOL_NAME = 'call'
    DESCRIPTION = "Call structural variants from sorted chained bam."

    INPUT_FILES = [
        TCP_INPUT(FileTypes.CFG, 'pbsv_config_in', 'pbsv Config In', 'pbsv Config'),
        TCP_INPUT(FileTypes.BAM, 'sorted_chained_bam', 'BAM ALIGNMENTS In', 'Sorted chained alignments'),
        TCP_INPUT(FileTypes.DS_REF, 'referenceset_in', 'Reference Set In', 'PacBio ReferenceSet'),
        TCP_INPUT(FileTypes.TXT, 'reference_regions', 'Reference Regions In', 'Reference Regions TXT')
    ]
    OUTPUT_FILES = [
        TCP_OUTPUT(FileTypes.BED, "structural_variants_bed", "Structural variants", "structural variants in BED", "structural_variants"),
        TCP_OUTPUT(FileTypes.VCF, "structural_variants_vcf", "Structural variants", "structural variants in VCF", "structural_variants"),
    ]


def run_main(i_cfg_fn, i_sorted_chained_bam_fn, i_ref_fn, i_ref_regions_fn, o_bed_fn, nproc):
    """ Call structural variants from sorted chained bam alignments."""
    log.debug("args: %r", locals())
    log.info("Reading pbsv config file %s", i_cfg_fn)
    cfg = SVConfig(i_cfg_fn)
    log.info("Reading reference regions file %s", i_ref_regions_fn)
    ref_regions = sanitize_ref_regions(ref_regions=to_ref_regions(open(i_ref_regions_fn, 'r').read().strip()),
        slop_size=cfg.positionwiggle, align_bam=i_sorted_chained_bam_fn) #pylint: disable=no-member
    log.debug("Restrict svcall to extended reference regions: %s", ';'.join([str(x) for x in ref_regions]))
    if nproc is not None and nproc >= 1: # override cfg.nproc although call is single threaded
        reset_cfg_nproc(cfg, nproc)
    log.debug("svcall(bamin=%r, reffa=%r, bedout=%r, cfg=cfg)", i_sorted_chained_bam_fn, i_ref_fn, o_bed_fn)
    log.debug("cfg=%r", cfg)
    svcall(bamin=i_sorted_chained_bam_fn, reffa=i_ref_fn, bedout=o_bed_fn, cfg=cfg, ref_regions=ref_regions)
    return 0


def rtc_runner(rtc):
    """resolved tool contract runner."""
    return run_main(i_cfg_fn=rtc.task.input_files[0],
                    i_sorted_chained_bam_fn=rtc.task.input_files[1],
                    i_ref_fn=rtc.task.input_files[2],
                    i_ref_regions_fn=rtc.task.input_files[3],
                    o_bed_fn=rtc.task.output_files[0],
                    nproc=rtc.task.nproc)


if __name__ == '__main__':
    sys.exit(main(args=sys.argv[1:], const=Constants, rtc_runner=rtc_runner, alog=log))
