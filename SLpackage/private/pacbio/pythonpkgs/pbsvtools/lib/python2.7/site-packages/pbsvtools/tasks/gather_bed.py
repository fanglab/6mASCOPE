#! python

"""Gather multiple bed."""
from __future__ import absolute_import

import logging
import sys
from pbcommand.models import FileTypes
from pbsvtools.basic import TCP_INPUT, TCP_OUTPUT, BaseGatherConstants, gather_main, gather_run_main

log = logging.getLogger(__name__)

def cat_txt_with_header(i_fns, o_fn):
    """ Concatenate input files i_fns, to output file.
    Only copy header lines from the very first input file, and skip others.
    """
    with open(o_fn, 'w') as writer:
        for i, i_fn in enumerate(i_fns):
            with open(i_fn, 'r') as reader:
                for l in reader:
                    if i == 0 or not l.startswith('#'):
                        writer.write(l)


class Constants(BaseGatherConstants):
    """Constants used for gathering scattered `pbsv call` BED files."""
    TOOL_NAME = "gather_bed"
    DESCRIPTION = "Gather BED"
    CHUNK_KEY = "$chunk.bed_id"
    DEFAULT_OUT_NAME = "structural_variants"

    OUTPUT_FILES = [
        TCP_OUTPUT(FileTypes.BED, "structural_variants_bed", "Structural Variants", "Gathered structural variants in BED", DEFAULT_OUT_NAME)
    ]

def rtc_runner(rtc):
    """
    :type rtc: pbcommand.models.ResolvedToolContract
    :return:
    """
    return gather_run_main(chunk_json=rtc.task.input_files[0],
                           chunk_key=Constants.CHUNK_KEY,
                           gathered_fn=rtc.task.output_files[0],
                           ln_name = Constants.DEFAULT_OUT_NAME,
                           gather_func=cat_txt_with_header)


if __name__ == '__main__':
    sys.exit(gather_main(args=sys.argv[1:], const=Constants, rtc_runner=rtc_runner, alog=log))
