from __future__ import absolute_import

from .independent.utils import is_bed, is_vcf
from .io.VcfIO import BedReader, BedWriter, VcfReader, VcfWriter, VcfRecord, BedRecord
from .io.bamstream import get_chr_to_index_dict_from_bam

def _sv_reader_cls(fn):
    if is_bed(fn):
        return BedReader
    elif is_vcf(fn):
        return VcfReader
    else:
        raise ValueError("Structural variants file {!r} must either be BED or VCF".format(fn))


def _sv_writer_cls(fn):
    if is_bed(fn):
        return BedWriter
    elif is_vcf(fn):
        return VcfWriter
    else:
        raise ValueError("Structural variants file {!r} must either be BED or VCF".format(fn))


def obj_to_pos_f(obj):
    """return pos of a sv obj."""
    if isinstance(obj, VcfRecord):
        return obj.pos
    elif isinstance(obj, BedRecord):
        return obj.start
    assert False, "Structural variant object {!r} must be either VcfRecord or BedRecord".format(obj)


def sort_sv(i_sv, aln_bam, o_sv, override_sv_id=True):
    """Sort structural variants in in_sv by chromosome order the same
    as listed in aln_bam header, and save to o_sv.
    """
    if not ((is_bed(i_sv) and is_bed(o_sv))) and not ((is_vcf(i_sv) and is_vcf(o_sv))):
        raise ValueError('Input and output structural varaints format must be the same {!r} {!r}'.format(i_sv, o_sv))

    # Get {chromosome: index} from bam
    chr_to_index_dict = get_chr_to_index_dict_from_bam(aln_bam)

    def obj_to_chr_index_f(obj):
        """return chromosome index of a sv obj."""
        return chr_to_index_dict[obj.chrom]

    def obj_to_sort_key(obj):
        """Return key for comparison"""
        return (obj_to_chr_index_f(obj), obj_to_pos_f(obj))

    reader = _sv_reader_cls(i_sv)(i_sv)
    i_sv_objs=[r for r in reader]
    o_sv_records = sorted(i_sv_objs, key=obj_to_sort_key)

    with _sv_writer_cls(o_sv)(o_sv, samples=reader.samples) as writer:
        for idx, sv in enumerate(o_sv_records):
            if override_sv_id:
                sv.set_pbsv_id(idx+1) # index start from 1
            writer.writeRecord(sv)
