from .cigar import HARD_CLIP, SOFT_CLIP

"""
Basic util functions for pysam AlignedSegment object.
"""

def get_query_start_end_in_forward_read(aln):
    """
    Return [start, end) in coordinate of forward query read such that
    * if aln is forward, forward_query_read[start: end] == aln.query_alignment_sequence
    * if aln is reverse, revcomp(forward_query_read[start: end]) == aln.query_alignment_sequence
    Note that output start is inclusive and end is exclusive
    """
    if not aln.is_reverse:
        start = get_query_alignment_pos_in_inferred_read(aln=aln, query_alignment_pos=aln.query_alignment_start)
        end = get_query_alignment_pos_in_inferred_read(aln=aln, query_alignment_pos=aln.query_alignment_end)
    else:
        start = get_query_alignment_pos_in_inferred_read(aln, aln.query_alignment_end - 1)
        end = get_query_alignment_pos_in_inferred_read(aln, aln.query_alignment_start) + 1
    return (start, end)


def get_clippings_from_alignment(aln):
    """
    Return (left_hardclip, right_hardclip, left_softclip, right_softclip) from alignment.
    Always use genomic orientation, e.g., '7H2S.......3S5H' returns (7, 5, 2, 3)
    """
    return get_clippings_from_cigartuples(aln.cigartuples)


def get_clippings_from_cigartuples(cigartuples):
    """
    ..doctest:
        >>> ct = ((5, 7), (4, 2), (0, 100), (4, 3), (5, 5)) # 7H2S100M3S5H >>> get_clippings_from_cigartuples(ct) (7, 5, 2, 3)
        >>> ct = ((5, 7), (0, 100), (4, 3)) # 7H100M3S
        >>> get_clippings_from_cigartuples(ct)
        (7, 0, 0, 3)
    """
    l_hardclip, r_hardclip, l_softclip, r_softclip = 0, 0, 0, 0
    idx = min(len(cigartuples), 2)
    for op, l in cigartuples[0:idx]:
        if op == HARD_CLIP:
            l_hardclip = l
        elif op == SOFT_CLIP:
            l_softclip = l

    for op, l in cigartuples[::-1][0:idx]:
        if op == HARD_CLIP:
            r_hardclip = l
        elif op == SOFT_CLIP:
            r_softclip = l
    return l_hardclip, r_hardclip, l_softclip, r_softclip


def get_query_alignment_pos_in_inferred_read(aln, query_alignment_pos):
    """
    Find position of aligned base pairs in inferred forward query read.
    -- query_alignment_pos is position of a query base pair in coordinate of aln.query_sequence,
       e.g., aln.query_alignment_start
    """
    return _get_query_alignment_pos_in_inferred_read(clippings=get_clippings_from_alignment(aln),
            is_reverse=aln.is_reverse, inferred_read_length=aln.infer_read_length(),
            query_alignment_pos=query_alignment_pos)


def _get_query_alignment_pos_in_inferred_read(clippings, is_reverse, inferred_read_length, query_alignment_pos):
    """
    Convert query alignment position (such as aln.query_alignment_start) in coordinate of forward read.

    CIGAR   : 7H3S10M2I10M6D10M4S5H
                   7H 3S    10M      2I     10M      6D        10M   4S   5H  --> direction
    REF     :             MMMMMMMMMM -- MMMMMMMMMM DDDDDD MMMMMMMMMM
    READ    : HHHHHHHSSS  MMMMMMMMMM II MMMMMMMMMM ------ MMMMMMMMMM SSSS HHHHH
                          |             |                 |        |
    QUERY ALN POS        [3,            15,               25,      34]
    QUERY ALN POS IN FORWARD READ
             [0,          10,           22,               32,               ,50]
    ...doctest:
       >>> clippings = (7, 5, 3, 4)
       >>> [_get_query_alignment_pos_in_inferred_read(clippings, False, 51, i) for i in (3, 4, 10, 24, 25)]
       [10, 11, 17, 31, 32]

    CIGAR   : 7H3S10M2I10M6D10M4S5H
                7H 3S    10M     2I     10M      6D        10M   4S   5H    <-- direction
    REF     :          MMMMMMMMMM -- MMMMMMMMMM DDDDDD MMMMMMMMMM
           HHHHHHHSSS  MMMMMMMMMM II MMMMMMMMMM ------ MMMMMMMMMM SSSS HHHHH  : <--  REVERSE COMPLEMENT READ
                       |             |                 |        |          |
    QUERY ALN POS     [3,            15,               25,      34]

    QUERY ALN POS IN REVERSE COMPLEMENTARY OF (READ)
          [0,         10                                        41,       ,50]

    QUERY ALN POS IN READ
          [50,        40                                        9,        ,0]
    ...doctest:
       >>> clippings = (7, 5, 3, 4)
       >>> [_get_query_alignment_pos_in_inferred_read(clippings, True, 51, i) for i in (3, 4, 34)]
       [40, 39, 9]
    """
    l_hardclip, r_hardclip, l_softclip, r_softclip = clippings
    ret = l_hardclip + query_alignment_pos if not is_reverse else  inferred_read_length - l_hardclip - query_alignment_pos - 1
    assert ret <= inferred_read_length # allow exclusive end
    assert ret >= -1 # allow exclusive start
    return ret
