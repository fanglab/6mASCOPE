#! python

"""Create a list of (movie, sample) tuples from a merged dataset.xml"""
from __future__ import absolute_import

import logging
import sys

from pbcommand.models import FileTypes
from pbsv1.samples import make_samples

from pbsvtools.basic import main, TCP_INPUT, TCP_OUTPUT, BaseConstants

log = logging.getLogger(__name__)


class Constants(BaseConstants):
    """Constants used for pbsv align
    Input: idx 0 - subreadset.xml
    Output: idx 0 - a json file containing a list of (moviename, sannitized_sample) tuples
    Output: idx 1 - a json file containing a list of (sample, sanitizied_sample) tuples
    """
    TOOL_NAME = "make_samples"
    DESCRIPTION = "Sanitize biological samples in SubreadSet, and link movies to sanitizied samples." +\
        "Write a list of (sample, sanitized sample) and a list of (movie: sanitized_sample) tuples to json files."
    INPUT_FILES = [
        TCP_INPUT(FileTypes.DS_SUBREADS, 'subreads_in', 'SubreadSet In', 'PacBio SubreadSet')
    ]
    OUTPUT_FILES = [
            TCP_OUTPUT(FileTypes.JSON, "moviename2sanitizedsample", "JSON of (movie, sanitizied sample) tuples", "JSON of (movie, sanitizied sample) tuples", "moviename2sanitizedsample"),
            TCP_OUTPUT(FileTypes.JSON, "sample2sanitizedsample", "JSON of (sample, sanititized sample) tuples", "JSON of (sample, sanitizied sample) tuples", "sample2sanitizedsample")
    ]
    NPROC = 1


def run_main(i_sr_fn, o_m2s_json_fn, o_s2s_json_fn):
    """Input SubreadSet xml,
    Sanitize biological samples, and link movies to sanititized samples.
    Write a list of (movie: sanitizied_sample) to o_m2s_json_fn.
    Write a list of (sample: sanitizied_sample) to o_s2s_json_fn.
    """
    log.debug("args: %r", locals())
    make_samples(ds_fn=i_sr_fn, movie_sanitized_sample_fn=o_m2s_json_fn, sample_sanitized_sample_fn=o_s2s_json_fn)
    log.debug("Write a list of (movie, sanitized_sample) tuples in: %s", o_m2s_json_fn)
    log.debug("Write a list of (sample, sanitized_sample) tuples in: %s", o_s2s_json_fn)
    return 0


def rtc_runner(rtc):
    """resolved tool contract runner."""
    return run_main(i_sr_fn=rtc.task.input_files[0],
                    o_m2s_json_fn=rtc.task.output_files[0],
                    o_s2s_json_fn=rtc.task.output_files[1])


if __name__ == '__main__':
    sys.exit(main(args=sys.argv[1:], const=Constants, rtc_runner=rtc_runner, alog=log))
