from __future__ import absolute_import

from .independent.utils import is_bed, is_vcf
from .io.VcfIO import BedReader, BedWriter, VcfReader, VcfWriter, VcfRecord, BedRecord
from .sort_sv import _sv_reader_cls,  _sv_writer_cls


def _pass_filter_criteria(fmts, min_readcount, min_readpercentage, min_readdepth):
    readcount = sum([fmt.ad for fmt in fmts])
    maxreadpercentage = max([fmt.ad * 100  / fmt.dp if fmt.dp > 0 else 0.0 for fmt in fmts])
    readdepth = sum([fmt.dp for fmt in fmts])
    return readcount >= min_readcount and maxreadpercentage >= min_readpercentage and readdepth >= min_readdepth


def filter_sv(i_sv, o_sv, min_readcount, min_readpercentage, min_readdepth,
        override_sv_id=False):
    """Sort structural variants in in_sv by chromosome order the same
    as listed in aln_bam header, and save to o_sv.
    """
    print(locals())
    if not ((is_bed(i_sv) and is_bed(o_sv))) and not ((is_vcf(i_sv) and is_vcf(o_sv))):
        raise ValueError('Input and output structural varaints format must be the same {!r} {!r}'.format(i_sv, o_sv))

    with _sv_reader_cls(i_sv)(i_sv) as reader, \
         _sv_writer_cls(o_sv)(o_sv, samples=reader.samples) as writer:
        for idx, sv in enumerate(reader):
            if override_sv_id:
                sv.set_pbsv_id(idx+1) # index start from 1
            if _pass_filter_criteria(sv.fmts.fmts, min_readcount, min_readpercentage, min_readdepth):
                writer.writeRecord(sv)
