#! python

"""run `pbsv config`, potentially allowing any option to be configurable from SL GUI."""
from __future__ import absolute_import
from __future__ import print_function

import logging
import sys

from pbsv1.config import SVConfig, SVConfigManipulator
import pbsv1.Constants as C
from pbcommand.models import FileTypes

from pbsvtools import get_tool_id, get_tcp_option_name
from pbsvtools.basic import main, TCP_INPUT, TCP_OUTPUT, BaseConstants

log = logging.getLogger(__name__)


class Constants(BaseConstants):

    """Constants used for pbsv config
    Input - idx 0, subreadset file
    Output - idx 0, pbsv config file
    """
    # MUST HAVE
    TOOL_NAME = "config"
    DESCRIPTION = "Generate config for structural variants pipeline"

    INPUT_FILES = [
        TCP_INPUT(FileTypes.DS_SUBREADS, 'subreads_in', 'SubreadSet In', 'PacBio SubreadSet')
    ]
    OUTPUT_FILES = [
        TCP_OUTPUT(FileTypes.CFG, "pbsv", "PBSV CONFIG", "Structural variants config", "pbsv")
    ]

    # OPTIONAL
    NPROC = 1
    PARAMS = [C.SVLENGTH, C.MINREADCOUNT, C.MINREADPERCENTAGE, C.SUBREADS_ALIGNER] # pbsv arguments configurable via SMRTLink


def make_cfg_obj(task_options):
    """For every param in Constants.PARAMS, override its default value cfg with
    value in task_options, and return updated cfg.

    task_options --- dict {tcp_task_option_id: val}
    e.g., task_options = {u'pbsvtools.task_options.svlength': 60, ...}
    return cfg, where cfg.svlength = 60
    """
    cfg = SVConfig()
    log.debug("Overriding config:\n%r\n with task options:\n%r\n", cfg, task_options)
    # here shows an example setting default value for
    for param in Constants.PARAMS:
        if not hasattr(cfg, param.name):
            raise ValueError("Could not set %s in pbsv config." % param.name)

        option_id = get_tcp_option_name(param.name)
        if option_id not in task_options:
            raise ValueError("Must sepcify %s in task_options" % option_id)
        setattr(cfg, param.name, task_options[option_id])
    print(cfg)
    return cfg


def run_main(o_cfg_fn, task_options):
    """ Generate a pbsv config file and save to o_cfg_fn """
    log.info("Generating pbsv config file %s", o_cfg_fn)
    log.debug("args: %r", locals())
    cfg = make_cfg_obj(task_options)
    with open(o_cfg_fn, 'w') as writer:
        SVConfigManipulator().write(cfg, writer)
    # Do not configure tmp_dir in config,
    # tmp_dir should be configured in resolved tool contract of
    # align and call tasks.
    return 0


def rtc_runner(rtc):
    """resolved tool contract runner."""
    return run_main(o_cfg_fn=rtc.task.output_files[0], task_options=rtc.task.options)



if __name__ == '__main__':
    sys.exit(main(args=sys.argv[1:], const=Constants, rtc_runner=rtc_runner, alog=log))
