"""
General func/tools used in pbsmrtpipe
"""

from __future__ import absolute_import, division, print_function

import os
import sys
import re
import time
import logging
import logging.config
import logging.handlers

from jinja2 import Environment, PackageLoader
from pbcommand.utils import walker

from pbsmrtpipe.decos import ignored
from pbsmrtpipe.constants import SLOG_PREFIX

HTML_TEMPLATE_ENV = Environment(loader=PackageLoader('pbsmrtpipe', 'html_templates'))


log = logging.getLogger(__name__)
slog = logging.getLogger(SLOG_PREFIX + __name__)


def get_or_else(option_t, default):
    # Port of Option[T] from scala
    if option_t is None:
        return default
    else:
        return option_t


def validate_type_or_raise(obj, klasses, msg=None):
    if not isinstance(obj, klasses):
        emsg = "{o} Got type {x}, expected type {y}.".format(o=obj, x=type(obj), y=klasses)
        if msg is not None:
            emsg = " ".join([emsg, msg])
        raise TypeError(emsg)
    return obj


def log_timing(func):
    """Simple deco to log the runtime of func"""
    started_at = time.time()

    def wrapper(*args, **kw):
        return func(*args, **kw)

    run_time = time.time() - started_at
    name = func.__name__
    log.info("Func {f} took {s:.2f} sec ({m:.2f} min)".format(f=name, s=run_time, m=run_time / 60.0))

    return wrapper


class StdOutStatusLogFilter(logging.Filter):

    def filter(self, record):
        return record.name.startswith(SLOG_PREFIX)


def is_verified(path, max_nfs_refresh=3):
    """Validate that a file exists. Force NFS refresh if necessary"""
    for i in xrange(max_nfs_refresh):
        with ignored(OSError):
            # Try to force an NFS refresh
            os.listdir(os.path.dirname(path))
            if os.path.exists(path):
                return True
            # time.sleep(0.25)

    return False


def get_default_logging_config_dict(master_log, master_level, pb_log, stdout_level):
    """Returns a dict configuration of the logger. """
    d = {
        'version': 1,
        'disable_existing_loggers': False,  # this fixes the problem
        'formatters': {
            'console': {
                'format': '%(message)s'
            },
            'standard': {
                'format': '[%(levelname)s] %(asctime)-15sZ [%(name)s] %(message)s'
            },
            'full': {
                'format': '[%(levelname)s] %(asctime)-15sZ [%(name)s %(funcName)s %(lineno)d] %(message)s'
            }
        },
        'filters': {
            "slog_filter": {
                '()': StdOutStatusLogFilter,
            }
        },
        'handlers': {
            'console': {
                'level': logging.getLevelName(stdout_level),
                'class': 'logging.StreamHandler',
                'formatter': 'console',
                'stream': 'ext://sys.stdout',
                'filters': ['slog_filter']
            },
            'console_err': {
                'level': "ERROR",
                'class': 'logging.StreamHandler',
                'formatter': 'console',
                'stream': 'ext://sys.stderr',
                'filters': ['slog_filter']
            },
            "debug_file_handler": {
                "class": 'logging.handlers.RotatingFileHandler',
                "level": logging.getLevelName(master_level),
                "formatter": "full",
                "filename": master_log,
                "maxBytes": "10485760",
                "backupCount": "20",
                "encoding": "utf8"
            },
            "info_file_handler": {
                "class": 'logging.handlers.RotatingFileHandler',
                "level": "INFO",
                "formatter": "standard",
                "filename": pb_log,
                "maxBytes": "10485760",
                "backupCount": "20",
                "encoding": "utf8",
                "filters": ['slog_filter']
            }
        },
        'loggers': {
            '': {
                'handlers': ['console', 'console_err', 'info_file_handler', 'debug_file_handler'],
                'level': 'DEBUG',
                'propagate': True
            }
        },
        'root': {
            'level': 'DEBUG',
            'handlers': ['console', 'console_err', 'debug_file_handler', 'info_file_handler']
        }

    }
    return d


def setup_internal_logs(master_log, master_level, pb_log, stdout_level):
    d = get_default_logging_config_dict(master_log, master_level, pb_log, stdout_level)
    logging.config.dictConfig(d)
    logging.Formatter.converter = time.gmtime
    return d


def get_num_files_and_disk_usage(root_dir):
    """returns the total number of files and total size in KB"""
    total = 0
    num_files = 0
    if os.path.exists(root_dir) and os.path.isdir(root_dir):
        for f in walker(root_dir, os.path.isfile):
            x = os.path.getsize(f)
            total += x
            num_files += 1

    total_kb = total / 1024.0
    return num_files, total_kb
