#! python
"""Summarizes the Long Amplicon Analysis"""

import os
import sys
import logging
from pprint import pformat

import numpy as np

from pbcommand.models.report import Report, Table, Column
from pbcommand.validators import validate_nonempty_file
from pbcommand.models import FileTypes, get_pbparser
from pbcommand.cli import pbparser_runner
from pbcommand.utils import setup_log

from pbreports.util import recfromcsv
from pbreports.io.specs import *

log = logging.getLogger(__name__)

__version__ = '0.4'


class Constants(object):
    TOOL_ID = "pbreports.tasks.amplicon_analysis_consensus"
    R_ID = "amplicon_analysis_consensus"
    T_ID = "result_table"
    C_BARCODE = "barcodename"
    C_RG = "referencegroup"
    C_CLUSTER = "coarsecluster"
    C_PHASE = "phase"
    C_LENGTH = "sequencelength"
    C_ACCURACY = "predictedaccuracy"
    C_COVERAGE = "totalcoverage"


spec = load_spec(Constants.R_ID)


def create_table(d, barcode):
    """Long Amplicon Analysis results table"""

    columns = []

    if barcode:
        columns.append(Column(Constants.C_BARCODE))
    if Constants.C_RG in d.dtype.names:
        columns.append(Column(Constants.C_RG))
    columns.append(Column(Constants.C_CLUSTER))
    columns.append(Column(Constants.C_PHASE))
    columns.append(Column(Constants.C_LENGTH))
    columns.append(Column(Constants.C_ACCURACY))
    columns.append(Column(Constants.C_COVERAGE))

    t = Table(Constants.T_ID,
              columns=columns)

    for fastaname in sorted(d.fastaname):
        row = d[d.fastaname == fastaname]
        for column in columns:
            # if column.id == "predictedaccuracy":
            #    accuracy = round(100 * row[column.id][0], 2)
            #    t.add_data_by_column_id(column.id, accuracy)
            # else:
            t.add_data_by_column_id(column.id, row[column.id][0])

    log.info(str(t))
    return t


def run_to_report(summary_file):
    log.info("Generating report v{v} from file: {f}".format(f=summary_file,
                                                            v=__version__))

    s = recfromcsv(summary_file)

    # Check whether we need
    barcode = False
    if np.unique(s.barcodename).shape[0] > 1:  # pylint: disable=no-member
        barcode = True

    # Filter out noise and chimera sequences
    try:
        s = s[s.noisesequence == False]
        s = s[s.ischimera == False]
    except AttributeError:
        # XXX not yet implemented
        pass

    # Convert the data to a table and the report
    table = create_table(s, barcode)
    r = Report(spec.id, tables=[table])

    return spec.apply_view(r)


def amplicon_analysis_consensus(incsv, outjson):
    log.info("Running {f} v{v}.".format(
        f=os.path.basename(__file__), v=__version__))
    report = run_to_report(incsv)
    log.info(pformat(report.to_dict()))
    report.write_json(outjson)
    return 0


def _args_runner(args):
    validate_nonempty_file(args.report_csv)
    amplicon_analysis_consensus(args.report_csv, args.report_json)
    return 0


def _resolved_tool_contract_runner(rtc):
    amplicon_analysis_consensus(rtc.task.input_files[0],
                                rtc.task.output_files[0])
    return 0


def _add_options_to_parser(p):
    p.add_input_file_type(
        FileTypes.CSV,
        file_id="report_csv",
        name="ConsensusReportCSV",
        description="Consensus Report CSV")
    p.add_output_file_type(
        FileTypes.REPORT,
        file_id="report_json",
        name="Amplicon Consensus Report",
        description="Summary of amplicon consensus analysis",
        default_name="consensus_report")
    return p


def _get_parser():
    driver_exe = ("python -m "
                  "pbreports.report.amplicon_analysis_consensus "
                  "--resolved-tool-contract ")
    p = get_pbparser(
        Constants.TOOL_ID,
        __version__,
        spec.title,
        __doc__,
        driver_exe)
    return _add_options_to_parser(p)


def main(argv=sys.argv):
    return pbparser_runner(argv[1:],
                           _get_parser(),
                           _args_runner,
                           _resolved_tool_contract_runner,
                           log,
                           setup_log)


# for 'python -m pbreports.report.amplicon_analysis_consensus ...'
if __name__ == "__main__":
    sys.exit(main())
