
"""
Generate a report for transcript mapping results.
"""

import functools
import logging
import os
import sys

from pbcommand.models.report import Report, PlotGroup, Attribute
from pbcommand.models import FileTypes, get_pbparser
from pbcommand.pb_io import load_report_from_json
from pbcommand.cli import pbparser_runner
from pbcommand.utils import setup_log
from pbcore.io import FastqReader, FastaReader

from pbreports.io.specs import load_spec
from pbreports.plot.helper import (create_plot_impl, get_blue,
                                   make_histogram_with_cdf)


log = logging.getLogger(__name__)
__version__ = "0.1"


class Constants(object):
    TOOL_ID = "pbreports.tasks.isoseq_mapping"
    DRIVER_EXE = "python -m pbreports.report.isoseq_mapping --resolved-tool-contract"
    R_ID = "isoseq_mapping"

    A_N_ISOFORMS = "number_mapped_unique_isoforms"
    A_N_LOCI = "number_of_mapped_unique_loci"

    PG_RL_HIST = "mapped_isoforms_readlength_group"
    P_RL_HIST = "mapped_isoforms_readlength_hist"


create_readlength_plot = functools.partial(
    create_plot_impl, make_histogram_with_cdf, Constants.P_RL_HIST,
    ("Isoform Length", "Number of Isoforms", "Isoforms > Read Length"), 80,
    Constants.P_RL_HIST + ".png", get_blue(3))

def is_fasta(filename):
    _, ext = os.path.splitext(filename)
    return ext in ['.fasta', '.fa']

def is_fastq(filename):
    _, ext = os.path.splitext(filename)
    return ext in ['.fastq', '.fq']

def get_reader(filename):
    if is_fasta(filename):
        return FastaReader(filename)
    if is_fastq(filename):
        return FastqReader(filename)
    raise ValueError("Unsupported file type {}, must be fastq or fasta!".format(filename))

def to_report(mapped_transcripts, collapse_report, json_out, output_dir):
    spec = load_spec("isoseq_mapping")
    with get_reader(mapped_transcripts) as reader:
        readlengths = [float(len(rec)) for rec in reader]
    length_plot = create_readlength_plot(readlengths, output_dir)
    length_group = PlotGroup(Constants.PG_RL_HIST,
                             plots=[length_plot],
                             thumbnail=length_plot.thumbnail)
    rpt = Report(
        Constants.R_ID,
        attributes=list(load_report_from_json(collapse_report).attributes),
        plotgroups=[length_group])
    rpt = spec.apply_view(rpt)
    rpt.write_json(json_out)
    log.info("Wrote report to %s", json_out)
    return 0


def _args_runner(args):
    return to_report(
        mapped_transcripts=args.mapped_transcripts,
        collapse_report=args.collapse_report,
        json_out=args.outJson,
        output_dir=os.path.dirname(args.outJson))


def _resolved_tool_contract_runner(rtc):
    return to_report(
        mapped_transcripts=rtc.task.input_files[0],
        collapse_report=rtc.task.input_files[1],
        json_out=rtc.task.output_files[0],
        output_dir=os.path.dirname(rtc.task.output_files[0]))


def _get_parser():
    p = get_pbparser(
        Constants.TOOL_ID,
        __version__,
        "Iso-Seq Mapping Report",
        __doc__,
        Constants.DRIVER_EXE,
        is_distributed=True)
    p.add_input_file_type(
        FileTypes.FASTQ,
        "mapped_transcripts",
        "Mapped high-quality transcripts",
        description="Mapped transcripts in BAM dataset format")
    p.add_input_file_type(
        FileTypes.JSON,
        "collapse_report",
        "Report from isocollapse",
        "Report from isocollapse")
    p.add_output_file_type(
        FileTypes.REPORT,
        "outJson",
        "Transcript Mapping Report",
        description="Summary of results from transcript mapping",
        default_name="isoseq_mapping")
    return p


def main(argv=sys.argv):
    return pbparser_runner(argv[1:],
                           _get_parser(),
                           _args_runner,
                           _resolved_tool_contract_runner,
                           log,
                           setup_log)


if __name__ == '__main__':
    sys.exit(main())
