#! python2.7
"""Generate a preassembly report based on JSON input generated by FALCON."""

import logging
import json
import os
import sys

from pbcommand.models.report import (Report, Attribute)
from pbcommand.cli import (pacbio_args_runner,
                           get_default_argparser_with_base_opts)
from pbcommand.utils import setup_log

log = logging.getLogger(__name__)

__all__ = []
__version__ = "2.0"


class Constants(object):
    R_ID = "preassembly"


def produce_report(
    genome_length,
    raw_reads,
    raw_mean,
    raw_n50,
    raw_p95,
    raw_esize,
    raw_bases,
    raw_coverage,
    length_cutoff,
    seed_reads,
    seed_bases,
    seed_mean,
    seed_n50,
    seed_p95,
    seed_esize,
    seed_coverage,
    preassembled_reads,
    preassembled_mean,
    preassembled_n50,
    preassembled_p95,
    preassembled_esize,
    preassembled_bases,
    preassembled_coverage,
    preassembled_yield,
    preassembled_seed_fragmentation,
    preassembled_seed_truncation,
    **ignored
):
    """Return a preassembly report as JSON string.
    Parameters are as defined in the spec-file.
    Extra parameters are ignored, so that the caller may be
    augmented in a separate commit prior to updates here.
    (That facilitates cross-team collaboration.)
    """
    log.info("Starting {f!r}".format(
        f=os.path.basename(__file__)))

    # Report Attributes
    attrs = []
    attrs.append(Attribute('genome_length', genome_length))
    attrs.append(Attribute('raw_reads', raw_reads))
    attrs.append(Attribute('raw_mean', int(round(raw_mean))))
    attrs.append(Attribute('raw_n50', raw_n50))
    attrs.append(Attribute('raw_p95', raw_p95))
    attrs.append(Attribute('raw_esize', raw_esize))
    attrs.append(Attribute('raw_bases', raw_bases))
    attrs.append(Attribute('raw_coverage', raw_coverage))
    attrs.append(Attribute('length_cutoff', length_cutoff))
    attrs.append(Attribute('seed_reads', seed_reads))
    attrs.append(Attribute('seed_mean', int(round(seed_mean))))
    attrs.append(Attribute('seed_n50', seed_n50))
    attrs.append(Attribute('seed_p95', seed_p95))
    attrs.append(Attribute('seed_esize', seed_esize))
    attrs.append(Attribute('seed_bases', seed_bases))
    attrs.append(Attribute('seed_coverage', seed_coverage))
    attrs.append(Attribute('preassembled_reads', preassembled_reads))
    attrs.append(Attribute('preassembled_mean', int(round(preassembled_mean))))
    attrs.append(Attribute('preassembled_n50', preassembled_n50))
    attrs.append(Attribute('preassembled_p95', preassembled_p95))
    attrs.append(Attribute('preassembled_esize', preassembled_esize))
    attrs.append(Attribute('preassembled_bases', preassembled_bases))
    attrs.append(Attribute('preassembled_coverage',
                           int(round(preassembled_coverage))))
    attrs.append(Attribute('preassembled_yield', preassembled_yield))
    attrs.append(Attribute('preassembled_seed_fragmentation',
                           preassembled_seed_fragmentation))
    attrs.append(Attribute('preassembled_seed_truncation',
                           preassembled_seed_truncation))

    report = Report(Constants.R_ID, title='Preassembly', attributes=attrs)

    from pbreports.io.specs import load_spec
    spec = load_spec(Constants.R_ID)
    report = spec.apply_view(report)

    return report.to_json()


def run_args(args):
    with open(args.json_stats) as json_in:
        d = json.loads(json_in.read())
        report_json = produce_report(**d)
        with open(args.output_json, "w") as json_out:
            json_out.write(report_json)
    return 0


def _get_parser():
    p = get_default_argparser_with_base_opts(
        version=__version__,
        description=__doc__,
        default_level="INFO")
    p.add_argument("json_stats", help="JSON file from FALCON")
    p.add_argument("output_json", help="Output Report JSON file")
    return p


def main(argv=sys.argv):
    return pacbio_args_runner(
        argv=argv[1:],
        parser=_get_parser(),
        args_runner_func=run_args,
        alog=log,
        setup_log_func=setup_log)


if __name__ == "__main__":
    sys.exit(main(sys.argv))
