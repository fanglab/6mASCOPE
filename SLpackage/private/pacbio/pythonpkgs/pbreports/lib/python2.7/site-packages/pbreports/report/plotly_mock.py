
"""
Generate mock report with Plotly example.
"""

import logging
import os.path as op
import sys

from pbcommand.utils import setup_log
from pbcommand.cli import pbparser_runner
from pbcommand.models.report import Report, PlotGroup
from pbcore.io import SubreadSet

from pbreports.plot.plotly_helper import to_mock_plot
from pbreports.util import get_subreads_report_parser
from pbreports.io.specs import load_spec

__version__ = "0.1.0"


class Constants(object):
    TOOL_ID = "pbreports.tasks.plotly_mock"
    DRIVER_EXE = "python -m pbreports.report.plotly_mock --resolved-tool-contract"
    R_ID = "plotly_mock"
    PG_ID = "plotly_mock"


log = logging.getLogger(__name__)
spec = load_spec(Constants.R_ID)


def to_report(subreads, output_dir):
    plot = to_mock_plot(op.join(output_dir, Constants.PG_ID + ".json.gz"))
    pg = PlotGroup(Constants.PG_ID, plots=[plot])
    ds = SubreadSet(subreads)
    return Report(Constants.R_ID,
                  attributes=[],
                  tables=[],
                  plotgroups=[pg],
                  dataset_uuids=[ds.uuid])


def _run_and_save_report(subreads, file_name):
    log.info("Writing mock report to %s", file_name)
    rpt = to_report(subreads, op.dirname(file_name))
    rpt.write_json(file_name)


def _run_rtc(rtc):  # pragma: no cover
    return _run_and_save_report(rtc.task.input_files[0],
                                rtc.task.output_files[0])


def _run_args(args):  # pragma: no cover
    return _run_and_save_report(args.subreads_xml, args.report)


def main(argv=sys.argv):  # pragma: no cover
    parser = get_subreads_report_parser(Constants.TOOL_ID,
                                        __version__,
                                        spec.title,
                                        __doc__,
                                        Constants.DRIVER_EXE,
                                        is_distributed=False)
    return pbparser_runner(argv[1:],
                           parser,
                           _run_args,
                           _run_rtc,
                           log,
                           setup_log)


if __name__ == "__main__":
    sys.exit(main())
