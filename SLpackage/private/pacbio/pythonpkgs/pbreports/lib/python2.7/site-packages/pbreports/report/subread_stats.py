
"""
Simple statistics for subread and read length distributions.
"""

import logging
import functools
import sys

import numpy as np

from pbcommand.utils import setup_log
from pbcommand.models.report import Report, Plot, Attribute, PlotGroup
from pbcommand.cli import pbparser_runner
from pbcore.io import SubreadSet

from pbreports.report.filter_stats_xml import (Constants as BaseConstants,
                                               to_subread_lengths_plot)
from pbreports.plot.helper import DEFAULT_DPI
from pbreports.util import (get_subreads_report_parser,
                            arg_runner_subreads_report,
                            rtc_runner_subreads_report)
from pbreports.io.index import get_pb_index_streamed
from pbreports.statistics import collect_streamed_pbi_read_distributions, _get_zmw_metrics
from pbreports.io.specs import load_spec


__version__ = "0.2.0"


class Constants(BaseConstants):
    TOOL_ID = "pbreports.tasks.subread_stats"
    DRIVER_EXE = "python -m pbreports.report.subread_stats --resolved-tool-contract"
    R_ID = "subread_stats"


log = logging.getLogger(__name__)
spec = load_spec(Constants.R_ID)


def make_report_from_distributions(subreads, distributions, unique_molecular_yield, output_dir):
    metrics = distributions.to_metrics_binned_subreads()
    attr = [
        Attribute(Constants.A_NBASES, metrics.read.nbases),
        Attribute(Constants.A_NREADS, metrics.read.size),
        Attribute(Constants.A_SUBREAD_LENGTH, metrics.subread.mean),
        Attribute(Constants.A_SUBREAD_N50, metrics.subread.n50),
        Attribute(Constants.A_YIELD, unique_molecular_yield)
    ]
    plot_groups = [to_subread_lengths_plot(distributions.subread, output_dir)]
    rpt = Report(Constants.R_ID,
                 attributes=attr,
                 plotgroups=plot_groups,
                 dataset_uuids=[subreads.uuid])
    return spec.apply_view(rpt)


def make_report(subreads, output_dir, dpi=DEFAULT_DPI):
    """
    Create a basic subread metrics report.  Since this may be run either as an
    independent tool or as part of the barcoding report, it handles the .pbi
    file reading flexibly.
    """
    pbi_stream = get_pb_index_streamed(subreads)
    dists, unique_molecular_yield = collect_streamed_pbi_read_distributions(pbi_stream)
    return make_report_from_distributions(subreads, dists, unique_molecular_yield, output_dir)


# XXX hook for subreads_reports.py
to_report_impl = make_report


def to_report(subreads, output_dir, dpi=DEFAULT_DPI,
              force_unstreamed_pbi=False):
    ds = SubreadSet(subreads, strict=True, skipCounts=not force_unstreamed_pbi)
    if force_unstreamed_pbi:
        ds.updateCounts()
    return make_report(ds, output_dir, dpi=dpi)


resolved_tool_contract_runner = functools.partial(rtc_runner_subreads_report,
                                                  to_report)
args_runner = functools.partial(arg_runner_subreads_report, to_report)


def main(argv=sys.argv):  # pragma: no cover
    mp = get_subreads_report_parser(Constants.TOOL_ID, __version__, spec.title,
                                    __doc__, Constants.DRIVER_EXE,
                                    is_distributed=False)
    return pbparser_runner(argv[1:],
                           mp,
                           args_runner,
                           resolved_tool_contract_runner,
                           log,
                           setup_log)


if __name__ == "__main__":
    sys.exit(main())
