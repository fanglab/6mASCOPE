"""
Wrapper for running amplicon_analysis_inputs report for LAAgc (with an extra
input file).
"""

import logging
import sys

from pbcommand.models import FileTypes
from pbcommand.cli import pbparser_runner
from pbcommand.utils import setup_log

from pbreports.report.amplicon_analysis_input import _get_parser, make_report


log = logging.getLogger(__name__)


class Constants(object):
    TOOL_ID = "pbreports.tasks.laagc_input"
    DRIVER_EXE = "python -m pbreports.report.laagc_input --resolved-tool-contract"


def _args_runner(args):
    return make_report(args.report_csv, args.report_json, args.locus_csv, args.barcoded_subreads)


def _rtc_runner(rtc):
    return make_report(rtc.task.input_files[0], rtc.task.output_files[0],
                       rtc.task.input_files[1], rtc.task.input_files[2])


def _get_laagc_parser():
    p = _get_parser(Constants.TOOL_ID, Constants.DRIVER_EXE)
    p.add_input_file_type(
        FileTypes.CSV,
        file_id="locus_csv",
        name="Mapped Subreads CSV",
        description="CSV of mapped subreads per sample per locus")
    p.add_input_file_type(
        FileTypes.DS_SUBREADS,
        file_id="barcoded_subreads",
        name="Barcoded Subreads",
        description="Barcoded SubreadSet XML")
    return p


def main(argv=sys.argv):
    return pbparser_runner(argv[1:],
                           _get_laagc_parser(),
                           _args_runner,
                           _rtc_runner,
                           log,
                           setup_log)


# for 'python -m pbreports.report.amplicon_analysis_input ...'
if __name__ == "__main__":
    sys.exit(main())
